// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrail
#include <flixel/addons/effects/FlxTrail.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_54e0b0e195bf849b_20_new,"flixel.addons.effects.FlxTrail","new",0xad9a4c7b,"flixel.addons.effects.FlxTrail.new","flixel/addons/effects/FlxTrail.hx",20,0x79f2ead4)
HX_LOCAL_STACK_FRAME(_hx_pos_54e0b0e195bf849b_116_destroy,"flixel.addons.effects.FlxTrail","destroy",0x288c5295,"flixel.addons.effects.FlxTrail.destroy","flixel/addons/effects/FlxTrail.hx",116,0x79f2ead4)
HX_LOCAL_STACK_FRAME(_hx_pos_54e0b0e195bf849b_139_update,"flixel.addons.effects.FlxTrail","update",0xf1cd4cce,"flixel.addons.effects.FlxTrail.update","flixel/addons/effects/FlxTrail.hx",139,0x79f2ead4)
HX_LOCAL_STACK_FRAME(_hx_pos_54e0b0e195bf849b_237_cacheValue,"flixel.addons.effects.FlxTrail","cacheValue",0x1383f314,"flixel.addons.effects.FlxTrail.cacheValue","flixel/addons/effects/FlxTrail.hx",237,0x79f2ead4)
HX_LOCAL_STACK_FRAME(_hx_pos_54e0b0e195bf849b_243_resetTrail,"flixel.addons.effects.FlxTrail","resetTrail",0x9dced8bc,"flixel.addons.effects.FlxTrail.resetTrail","flixel/addons/effects/FlxTrail.hx",243,0x79f2ead4)
HX_LOCAL_STACK_FRAME(_hx_pos_54e0b0e195bf849b_267_increaseLength,"flixel.addons.effects.FlxTrail","increaseLength",0x6ebb160d,"flixel.addons.effects.FlxTrail.increaseLength","flixel/addons/effects/FlxTrail.hx",267,0x79f2ead4)
HX_LOCAL_STACK_FRAME(_hx_pos_54e0b0e195bf849b_308_changeGraphic,"flixel.addons.effects.FlxTrail","changeGraphic",0x690acaf3,"flixel.addons.effects.FlxTrail.changeGraphic","flixel/addons/effects/FlxTrail.hx",308,0x79f2ead4)
HX_LOCAL_STACK_FRAME(_hx_pos_54e0b0e195bf849b_326_changeValuesEnabled,"flixel.addons.effects.FlxTrail","changeValuesEnabled",0x328b834a,"flixel.addons.effects.FlxTrail.changeValuesEnabled","flixel/addons/effects/FlxTrail.hx",326,0x79f2ead4)
namespace flixel{
namespace addons{
namespace effects{

void FlxTrail_obj::__construct( ::flixel::FlxSprite Target, ::Dynamic Graphic,hx::Null< int >  __o_Length,hx::Null< int >  __o_Delay,hx::Null< Float >  __o_Alpha,hx::Null< Float >  __o_Diff){
int Length = __o_Length.Default(10);
int Delay = __o_Delay.Default(3);
Float Alpha = __o_Alpha.Default(((Float)0.4));
Float Diff = __o_Diff.Default(((Float)0.05));
            	HX_STACKFRAME(&_hx_pos_54e0b0e195bf849b_20_new)
HXLINE(  79)		this->_recentAnimations = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  78)		this->_recentFlipY = ::Array_obj< bool >::__new(0);
HXLINE(  77)		this->_recentFlipX = ::Array_obj< bool >::__new(0);
HXLINE(  76)		this->_recentFrames = ::Array_obj< int >::__new(0);
HXLINE(  75)		this->_recentScales = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  74)		this->_recentAngles = ::Array_obj< Float >::__new(0);
HXLINE(  73)		this->_recentPositions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  67)		this->_transp = ((Float)1);
HXLINE(  59)		this->_trailLength = (int)0;
HXLINE(  55)		this->_counter = (int)0;
HXLINE(  50)		this->framesEnabled = true;
HXLINE(  46)		this->scalesEnabled = true;
HXLINE(  42)		this->rotationsEnabled = true;
HXLINE(  38)		this->yEnabled = true;
HXLINE(  34)		this->xEnabled = true;
HXLINE(  99)		super::__construct(null(),null(),null());
HXLINE( 101)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 101)		point->_inPool = false;
HXDLIN( 101)		 ::flixel::math::FlxPoint _this = point;
HXDLIN( 101)		 ::flixel::math::FlxPoint point1 = Target->origin;
HXDLIN( 101)		_this->set_x(point1->x);
HXDLIN( 101)		_this->set_y(point1->y);
HXDLIN( 101)		if (point1->_weak) {
HXLINE( 101)			point1->put();
            		}
HXDLIN( 101)		this->_spriteOrigin = _this;
HXLINE( 104)		this->target = Target;
HXLINE( 105)		this->delay = Delay;
HXLINE( 106)		this->_graphic = Graphic;
HXLINE( 107)		this->_transp = Alpha;
HXLINE( 108)		this->_difference = Diff;
HXLINE( 111)		this->increaseLength(Length);
HXLINE( 112)		this->set_solid(false);
            	}

Dynamic FlxTrail_obj::__CreateEmpty() { return new FlxTrail_obj; }

void *FlxTrail_obj::_hx_vtable = 0;

Dynamic FlxTrail_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTrail_obj > _hx_result = new FlxTrail_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool FlxTrail_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x1dbce2a7) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x1dbce2a7;
			}
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x282173df || inClassId==(int)0x2e105115;
	}
}

void FlxTrail_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_54e0b0e195bf849b_116_destroy)
HXLINE( 117)		::flixel::util::FlxDestroyUtil_obj::putArray(this->_recentPositions);
HXLINE( 118)		::flixel::util::FlxDestroyUtil_obj::putArray(this->_recentScales);
HXLINE( 120)		this->_recentAngles = null();
HXLINE( 121)		this->_recentPositions = null();
HXLINE( 122)		this->_recentScales = null();
HXLINE( 123)		this->_recentFrames = null();
HXLINE( 124)		this->_recentFlipX = null();
HXLINE( 125)		this->_recentFlipY = null();
HXLINE( 126)		this->_recentAnimations = null();
HXLINE( 127)		this->_spriteOrigin = null();
HXLINE( 129)		this->target = null();
HXLINE( 130)		this->_graphic = null();
HXLINE( 132)		this->super::destroy();
            	}


void FlxTrail_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_54e0b0e195bf849b_139_update)
HXLINE( 141)		this->_counter++;
HXLINE( 144)		bool _hx_tmp;
HXDLIN( 144)		if ((this->_counter >= this->delay)) {
HXLINE( 144)			_hx_tmp = (this->_trailLength >= (int)1);
            		}
            		else {
HXLINE( 144)			_hx_tmp = false;
            		}
HXDLIN( 144)		if (_hx_tmp) {
HXLINE( 146)			this->_counter = (int)0;
HXLINE( 149)			 ::flixel::math::FlxPoint spritePosition = null();
HXLINE( 150)			if ((this->_recentPositions->length == this->_trailLength)) {
HXLINE( 152)				spritePosition = this->_recentPositions->pop().StaticCast<  ::flixel::math::FlxPoint >();
            			}
            			else {
HXLINE( 156)				 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 156)				point->_inPool = false;
HXDLIN( 156)				spritePosition = point;
            			}
HXLINE( 159)			Float _hx_tmp1 = (this->target->x - this->target->offset->x);
HXDLIN( 159)			spritePosition->set(_hx_tmp1,(this->target->y - this->target->offset->y));
HXLINE( 160)			this->_recentPositions->unshift(spritePosition);
HXLINE( 163)			if (this->rotationsEnabled) {
HXLINE( 165)				this->cacheValue(this->_recentAngles,this->target->angle);
            			}
HXLINE( 169)			if (this->scalesEnabled) {
HXLINE( 171)				 ::flixel::math::FlxPoint spriteScale = null();
HXLINE( 172)				if ((this->_recentScales->length == this->_trailLength)) {
HXLINE( 174)					spriteScale = this->_recentScales->pop().StaticCast<  ::flixel::math::FlxPoint >();
            				}
            				else {
HXLINE( 178)					 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 178)					point1->_inPool = false;
HXDLIN( 178)					spriteScale = point1;
            				}
HXLINE( 181)				spriteScale->set(this->target->scale->x,this->target->scale->y);
HXLINE( 182)				this->_recentScales->unshift(spriteScale);
            			}
HXLINE( 186)			bool _hx_tmp2;
HXDLIN( 186)			if (this->framesEnabled) {
HXLINE( 186)				_hx_tmp2 = hx::IsNull( this->_graphic );
            			}
            			else {
HXLINE( 186)				_hx_tmp2 = false;
            			}
HXDLIN( 186)			if (_hx_tmp2) {
HXLINE( 188)				this->cacheValue(this->_recentFrames,this->target->animation->frameIndex);
HXLINE( 189)				this->cacheValue(this->_recentFlipX,this->target->flipX);
HXLINE( 190)				this->cacheValue(this->_recentFlipY,this->target->flipY);
HXLINE( 191)				this->cacheValue(this->_recentAnimations,this->target->animation->_curAnim);
            			}
HXLINE( 195)			 ::flixel::FlxSprite trailSprite;
HXLINE( 197)			{
HXLINE( 197)				int _g1 = (int)0;
HXDLIN( 197)				int _g = this->_recentPositions->length;
HXDLIN( 197)				while((_g1 < _g)){
HXLINE( 197)					_g1 = (_g1 + (int)1);
HXDLIN( 197)					int i = (_g1 - (int)1);
HXLINE( 199)					trailSprite = Dynamic( this->group->members->__get(i)).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 200)					trailSprite->set_x(this->_recentPositions->__get(i).StaticCast<  ::flixel::math::FlxPoint >()->x);
HXLINE( 201)					trailSprite->set_y(this->_recentPositions->__get(i).StaticCast<  ::flixel::math::FlxPoint >()->y);
HXLINE( 204)					if (this->rotationsEnabled) {
HXLINE( 206)						trailSprite->set_angle(this->_recentAngles->__get(i));
HXLINE( 207)						trailSprite->origin->set_x(this->_spriteOrigin->x);
HXLINE( 208)						trailSprite->origin->set_y(this->_spriteOrigin->y);
            					}
HXLINE( 212)					if (this->scalesEnabled) {
HXLINE( 214)						trailSprite->scale->set_x(this->_recentScales->__get(i).StaticCast<  ::flixel::math::FlxPoint >()->x);
HXLINE( 215)						trailSprite->scale->set_y(this->_recentScales->__get(i).StaticCast<  ::flixel::math::FlxPoint >()->y);
            					}
HXLINE( 219)					bool _hx_tmp3;
HXDLIN( 219)					if (this->framesEnabled) {
HXLINE( 219)						_hx_tmp3 = hx::IsNull( this->_graphic );
            					}
            					else {
HXLINE( 219)						_hx_tmp3 = false;
            					}
HXDLIN( 219)					if (_hx_tmp3) {
HXLINE( 221)						 ::flixel::animation::FlxAnimationController trailSprite1 = trailSprite->animation;
HXDLIN( 221)						trailSprite1->set_frameIndex(this->_recentFrames->__get(i));
HXLINE( 222)						trailSprite->set_flipX(this->_recentFlipX->__get(i));
HXLINE( 223)						trailSprite->set_flipY(this->_recentFlipY->__get(i));
HXLINE( 225)						{
HXLINE( 225)							 ::flixel::animation::FlxAnimationController _this = trailSprite->animation;
HXDLIN( 225)							 ::flixel::animation::FlxAnimation Anim = this->_recentAnimations->__get(i).StaticCast<  ::flixel::animation::FlxAnimation >();
HXDLIN( 225)							if (hx::IsNotEq( Anim,_this->_curAnim )) {
HXLINE( 225)								if (hx::IsNotNull( _this->_curAnim )) {
HXLINE( 225)									_this->_curAnim->stop();
            								}
HXDLIN( 225)								if (hx::IsNotNull( Anim )) {
HXLINE( 225)									Anim->play(null(),null(),null());
            								}
            							}
HXDLIN( 225)							_this->_curAnim = Anim;
            						}
            					}
HXLINE( 229)					trailSprite->set_exists(true);
            				}
            			}
            		}
HXLINE( 233)		this->super::update(elapsed);
            	}


void FlxTrail_obj::cacheValue(::cpp::VirtualArray array, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_54e0b0e195bf849b_237_cacheValue)
HXLINE( 238)		array->unshift(value);
HXLINE( 239)		::flixel::util::FlxArrayUtil_obj::setLength_cacheValue_T(array,this->_trailLength);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTrail_obj,cacheValue,(void))

void FlxTrail_obj::resetTrail(){
            	HX_STACKFRAME(&_hx_pos_54e0b0e195bf849b_243_resetTrail)
HXLINE( 244)		this->_recentPositions->removeRange((int)0,this->_recentPositions->length);
HXLINE( 245)		this->_recentAngles->removeRange((int)0,this->_recentAngles->length);
HXLINE( 246)		this->_recentScales->removeRange((int)0,this->_recentScales->length);
HXLINE( 247)		this->_recentFrames->removeRange((int)0,this->_recentFrames->length);
HXLINE( 248)		this->_recentFlipX->removeRange((int)0,this->_recentFlipX->length);
HXLINE( 249)		this->_recentFlipY->removeRange((int)0,this->_recentFlipY->length);
HXLINE( 250)		this->_recentAnimations->removeRange((int)0,this->_recentAnimations->length);
HXLINE( 252)		{
HXLINE( 252)			int _g1 = (int)0;
HXDLIN( 252)			int _g = this->group->members->get_length();
HXDLIN( 252)			while((_g1 < _g)){
HXLINE( 252)				_g1 = (_g1 + (int)1);
HXDLIN( 252)				int i = (_g1 - (int)1);
HXLINE( 254)				if (hx::IsNotNull( Dynamic( this->group->members->__get(i)).StaticCast<  ::flixel::FlxSprite >() )) {
HXLINE( 256)					Dynamic( this->group->members->__get(i)).StaticCast<  ::flixel::FlxSprite >()->set_exists(false);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTrail_obj,resetTrail,(void))

void FlxTrail_obj::increaseLength(int Amount){
            	HX_GC_STACKFRAME(&_hx_pos_54e0b0e195bf849b_267_increaseLength)
HXLINE( 269)		if ((Amount <= (int)0)) {
HXLINE( 271)			return;
            		}
HXLINE( 274)		 ::flixel::addons::effects::FlxTrail _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 274)		_hx_tmp->_trailLength = (_hx_tmp->_trailLength + Amount);
HXLINE( 277)		{
HXLINE( 277)			int _g1 = (int)0;
HXDLIN( 277)			int _g = Amount;
HXDLIN( 277)			while((_g1 < _g)){
HXLINE( 277)				_g1 = (_g1 + (int)1);
HXDLIN( 277)				int i = (_g1 - (int)1);
HXLINE( 279)				 ::flixel::FlxSprite trailSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE( 281)				if (hx::IsNull( this->_graphic )) {
HXLINE( 283)					trailSprite->loadGraphicFromSprite(this->target);
            				}
            				else {
HXLINE( 287)					trailSprite->loadGraphic(this->_graphic,null(),null(),null(),null(),null());
            				}
HXLINE( 289)				trailSprite->set_exists(false);
HXLINE( 290)				this->add(trailSprite);
HXLINE( 291)				trailSprite->set_alpha(this->_transp);
HXLINE( 292)				 ::flixel::addons::effects::FlxTrail _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 292)				_hx_tmp1->_transp = (_hx_tmp1->_transp - this->_difference);
HXLINE( 293)				trailSprite->set_solid((((int)this->allowCollisions & (int)(int)4369) > (int)0));
HXLINE( 295)				if ((trailSprite->alpha <= (int)0)) {
HXLINE( 297)					trailSprite->kill();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTrail_obj,increaseLength,(void))

void FlxTrail_obj::changeGraphic( ::Dynamic Image){
            	HX_STACKFRAME(&_hx_pos_54e0b0e195bf849b_308_changeGraphic)
HXLINE( 309)		this->_graphic = Image;
HXLINE( 311)		{
HXLINE( 311)			int _g1 = (int)0;
HXDLIN( 311)			int _g = this->_trailLength;
HXDLIN( 311)			while((_g1 < _g)){
HXLINE( 311)				_g1 = (_g1 + (int)1);
HXDLIN( 311)				int i = (_g1 - (int)1);
HXLINE( 313)				Dynamic( this->group->members->__get(i)).StaticCast<  ::flixel::FlxSprite >()->loadGraphic(Image,null(),null(),null(),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTrail_obj,changeGraphic,(void))

void FlxTrail_obj::changeValuesEnabled(bool Angle,hx::Null< bool >  __o_X,hx::Null< bool >  __o_Y,hx::Null< bool >  __o_Scale){
bool X = __o_X.Default(true);
bool Y = __o_Y.Default(true);
bool Scale = __o_Scale.Default(true);
            	HX_STACKFRAME(&_hx_pos_54e0b0e195bf849b_326_changeValuesEnabled)
HXLINE( 327)		this->rotationsEnabled = Angle;
HXLINE( 328)		this->xEnabled = X;
HXLINE( 329)		this->yEnabled = Y;
HXLINE( 330)		this->scalesEnabled = Scale;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxTrail_obj,changeValuesEnabled,(void))


hx::ObjectPtr< FlxTrail_obj > FlxTrail_obj::__new( ::flixel::FlxSprite Target, ::Dynamic Graphic,hx::Null< int >  __o_Length,hx::Null< int >  __o_Delay,hx::Null< Float >  __o_Alpha,hx::Null< Float >  __o_Diff) {
	hx::ObjectPtr< FlxTrail_obj > __this = new FlxTrail_obj();
	__this->__construct(Target,Graphic,__o_Length,__o_Delay,__o_Alpha,__o_Diff);
	return __this;
}

hx::ObjectPtr< FlxTrail_obj > FlxTrail_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::FlxSprite Target, ::Dynamic Graphic,hx::Null< int >  __o_Length,hx::Null< int >  __o_Delay,hx::Null< Float >  __o_Alpha,hx::Null< Float >  __o_Diff) {
	FlxTrail_obj *__this = (FlxTrail_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTrail_obj), true, "flixel.addons.effects.FlxTrail"));
	*(void **)__this = FlxTrail_obj::_hx_vtable;
	__this->__construct(Target,Graphic,__o_Length,__o_Delay,__o_Alpha,__o_Diff);
	return __this;
}

FlxTrail_obj::FlxTrail_obj()
{
}

void FlxTrail_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTrail);
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(delay,"delay");
	HX_MARK_MEMBER_NAME(xEnabled,"xEnabled");
	HX_MARK_MEMBER_NAME(yEnabled,"yEnabled");
	HX_MARK_MEMBER_NAME(rotationsEnabled,"rotationsEnabled");
	HX_MARK_MEMBER_NAME(scalesEnabled,"scalesEnabled");
	HX_MARK_MEMBER_NAME(framesEnabled,"framesEnabled");
	HX_MARK_MEMBER_NAME(_counter,"_counter");
	HX_MARK_MEMBER_NAME(_trailLength,"_trailLength");
	HX_MARK_MEMBER_NAME(_graphic,"_graphic");
	HX_MARK_MEMBER_NAME(_transp,"_transp");
	HX_MARK_MEMBER_NAME(_difference,"_difference");
	HX_MARK_MEMBER_NAME(_recentPositions,"_recentPositions");
	HX_MARK_MEMBER_NAME(_recentAngles,"_recentAngles");
	HX_MARK_MEMBER_NAME(_recentScales,"_recentScales");
	HX_MARK_MEMBER_NAME(_recentFrames,"_recentFrames");
	HX_MARK_MEMBER_NAME(_recentFlipX,"_recentFlipX");
	HX_MARK_MEMBER_NAME(_recentFlipY,"_recentFlipY");
	HX_MARK_MEMBER_NAME(_recentAnimations,"_recentAnimations");
	HX_MARK_MEMBER_NAME(_spriteOrigin,"_spriteOrigin");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTrail_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(delay,"delay");
	HX_VISIT_MEMBER_NAME(xEnabled,"xEnabled");
	HX_VISIT_MEMBER_NAME(yEnabled,"yEnabled");
	HX_VISIT_MEMBER_NAME(rotationsEnabled,"rotationsEnabled");
	HX_VISIT_MEMBER_NAME(scalesEnabled,"scalesEnabled");
	HX_VISIT_MEMBER_NAME(framesEnabled,"framesEnabled");
	HX_VISIT_MEMBER_NAME(_counter,"_counter");
	HX_VISIT_MEMBER_NAME(_trailLength,"_trailLength");
	HX_VISIT_MEMBER_NAME(_graphic,"_graphic");
	HX_VISIT_MEMBER_NAME(_transp,"_transp");
	HX_VISIT_MEMBER_NAME(_difference,"_difference");
	HX_VISIT_MEMBER_NAME(_recentPositions,"_recentPositions");
	HX_VISIT_MEMBER_NAME(_recentAngles,"_recentAngles");
	HX_VISIT_MEMBER_NAME(_recentScales,"_recentScales");
	HX_VISIT_MEMBER_NAME(_recentFrames,"_recentFrames");
	HX_VISIT_MEMBER_NAME(_recentFlipX,"_recentFlipX");
	HX_VISIT_MEMBER_NAME(_recentFlipY,"_recentFlipY");
	HX_VISIT_MEMBER_NAME(_recentAnimations,"_recentAnimations");
	HX_VISIT_MEMBER_NAME(_spriteOrigin,"_spriteOrigin");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTrail_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { return hx::Val( delay ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return hx::Val( target ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_transp") ) { return hx::Val( _transp ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"xEnabled") ) { return hx::Val( xEnabled ); }
		if (HX_FIELD_EQ(inName,"yEnabled") ) { return hx::Val( yEnabled ); }
		if (HX_FIELD_EQ(inName,"_counter") ) { return hx::Val( _counter ); }
		if (HX_FIELD_EQ(inName,"_graphic") ) { return hx::Val( _graphic ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cacheValue") ) { return hx::Val( cacheValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetTrail") ) { return hx::Val( resetTrail_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_difference") ) { return hx::Val( _difference ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_trailLength") ) { return hx::Val( _trailLength ); }
		if (HX_FIELD_EQ(inName,"_recentFlipX") ) { return hx::Val( _recentFlipX ); }
		if (HX_FIELD_EQ(inName,"_recentFlipY") ) { return hx::Val( _recentFlipY ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"scalesEnabled") ) { return hx::Val( scalesEnabled ); }
		if (HX_FIELD_EQ(inName,"framesEnabled") ) { return hx::Val( framesEnabled ); }
		if (HX_FIELD_EQ(inName,"_recentAngles") ) { return hx::Val( _recentAngles ); }
		if (HX_FIELD_EQ(inName,"_recentScales") ) { return hx::Val( _recentScales ); }
		if (HX_FIELD_EQ(inName,"_recentFrames") ) { return hx::Val( _recentFrames ); }
		if (HX_FIELD_EQ(inName,"_spriteOrigin") ) { return hx::Val( _spriteOrigin ); }
		if (HX_FIELD_EQ(inName,"changeGraphic") ) { return hx::Val( changeGraphic_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"increaseLength") ) { return hx::Val( increaseLength_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rotationsEnabled") ) { return hx::Val( rotationsEnabled ); }
		if (HX_FIELD_EQ(inName,"_recentPositions") ) { return hx::Val( _recentPositions ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_recentAnimations") ) { return hx::Val( _recentAnimations ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"changeValuesEnabled") ) { return hx::Val( changeValuesEnabled_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTrail_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { delay=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_transp") ) { _transp=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"xEnabled") ) { xEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yEnabled") ) { yEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_counter") ) { _counter=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_graphic") ) { _graphic=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_difference") ) { _difference=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_trailLength") ) { _trailLength=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_recentFlipX") ) { _recentFlipX=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_recentFlipY") ) { _recentFlipY=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"scalesEnabled") ) { scalesEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"framesEnabled") ) { framesEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_recentAngles") ) { _recentAngles=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_recentScales") ) { _recentScales=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_recentFrames") ) { _recentFrames=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_spriteOrigin") ) { _spriteOrigin=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rotationsEnabled") ) { rotationsEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_recentPositions") ) { _recentPositions=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_recentAnimations") ) { _recentAnimations=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTrail_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("target","\x51","\xf3","\xec","\x86"));
	outFields->push(HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"));
	outFields->push(HX_HCSTRING("xEnabled","\xe9","\xaa","\x27","\x1b"));
	outFields->push(HX_HCSTRING("yEnabled","\x08","\x1d","\x5a","\x54"));
	outFields->push(HX_HCSTRING("rotationsEnabled","\x8c","\x1b","\x2e","\x98"));
	outFields->push(HX_HCSTRING("scalesEnabled","\xd8","\xd8","\x9a","\xec"));
	outFields->push(HX_HCSTRING("framesEnabled","\x7b","\x5d","\x56","\xfc"));
	outFields->push(HX_HCSTRING("_counter","\x7d","\x08","\x12","\x57"));
	outFields->push(HX_HCSTRING("_trailLength","\x4d","\x63","\xcf","\x2d"));
	outFields->push(HX_HCSTRING("_graphic","\x29","\xb4","\xbf","\xad"));
	outFields->push(HX_HCSTRING("_transp","\xe7","\x9c","\xfc","\xb3"));
	outFields->push(HX_HCSTRING("_difference","\x1c","\x69","\x1b","\x19"));
	outFields->push(HX_HCSTRING("_recentPositions","\x10","\x4e","\xba","\xee"));
	outFields->push(HX_HCSTRING("_recentAngles","\x1a","\xdf","\x8c","\x9a"));
	outFields->push(HX_HCSTRING("_recentScales","\x83","\xb4","\x99","\x73"));
	outFields->push(HX_HCSTRING("_recentFrames","\x80","\x79","\xf9","\xe3"));
	outFields->push(HX_HCSTRING("_recentFlipX","\x71","\xf4","\x17","\xa0"));
	outFields->push(HX_HCSTRING("_recentFlipY","\x72","\xf4","\x17","\xa0"));
	outFields->push(HX_HCSTRING("_recentAnimations","\xc9","\xf3","\x02","\x00"));
	outFields->push(HX_HCSTRING("_spriteOrigin","\xaa","\x4e","\x52","\xc5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTrail_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxTrail_obj,target),HX_HCSTRING("target","\x51","\xf3","\xec","\x86")},
	{hx::fsInt,(int)offsetof(FlxTrail_obj,delay),HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7")},
	{hx::fsBool,(int)offsetof(FlxTrail_obj,xEnabled),HX_HCSTRING("xEnabled","\xe9","\xaa","\x27","\x1b")},
	{hx::fsBool,(int)offsetof(FlxTrail_obj,yEnabled),HX_HCSTRING("yEnabled","\x08","\x1d","\x5a","\x54")},
	{hx::fsBool,(int)offsetof(FlxTrail_obj,rotationsEnabled),HX_HCSTRING("rotationsEnabled","\x8c","\x1b","\x2e","\x98")},
	{hx::fsBool,(int)offsetof(FlxTrail_obj,scalesEnabled),HX_HCSTRING("scalesEnabled","\xd8","\xd8","\x9a","\xec")},
	{hx::fsBool,(int)offsetof(FlxTrail_obj,framesEnabled),HX_HCSTRING("framesEnabled","\x7b","\x5d","\x56","\xfc")},
	{hx::fsInt,(int)offsetof(FlxTrail_obj,_counter),HX_HCSTRING("_counter","\x7d","\x08","\x12","\x57")},
	{hx::fsInt,(int)offsetof(FlxTrail_obj,_trailLength),HX_HCSTRING("_trailLength","\x4d","\x63","\xcf","\x2d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTrail_obj,_graphic),HX_HCSTRING("_graphic","\x29","\xb4","\xbf","\xad")},
	{hx::fsFloat,(int)offsetof(FlxTrail_obj,_transp),HX_HCSTRING("_transp","\xe7","\x9c","\xfc","\xb3")},
	{hx::fsFloat,(int)offsetof(FlxTrail_obj,_difference),HX_HCSTRING("_difference","\x1c","\x69","\x1b","\x19")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxTrail_obj,_recentPositions),HX_HCSTRING("_recentPositions","\x10","\x4e","\xba","\xee")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(FlxTrail_obj,_recentAngles),HX_HCSTRING("_recentAngles","\x1a","\xdf","\x8c","\x9a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxTrail_obj,_recentScales),HX_HCSTRING("_recentScales","\x83","\xb4","\x99","\x73")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxTrail_obj,_recentFrames),HX_HCSTRING("_recentFrames","\x80","\x79","\xf9","\xe3")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(FlxTrail_obj,_recentFlipX),HX_HCSTRING("_recentFlipX","\x71","\xf4","\x17","\xa0")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(FlxTrail_obj,_recentFlipY),HX_HCSTRING("_recentFlipY","\x72","\xf4","\x17","\xa0")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxTrail_obj,_recentAnimations),HX_HCSTRING("_recentAnimations","\xc9","\xf3","\x02","\x00")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxTrail_obj,_spriteOrigin),HX_HCSTRING("_spriteOrigin","\xaa","\x4e","\x52","\xc5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTrail_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTrail_obj_sMemberFields[] = {
	HX_HCSTRING("target","\x51","\xf3","\xec","\x86"),
	HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"),
	HX_HCSTRING("xEnabled","\xe9","\xaa","\x27","\x1b"),
	HX_HCSTRING("yEnabled","\x08","\x1d","\x5a","\x54"),
	HX_HCSTRING("rotationsEnabled","\x8c","\x1b","\x2e","\x98"),
	HX_HCSTRING("scalesEnabled","\xd8","\xd8","\x9a","\xec"),
	HX_HCSTRING("framesEnabled","\x7b","\x5d","\x56","\xfc"),
	HX_HCSTRING("_counter","\x7d","\x08","\x12","\x57"),
	HX_HCSTRING("_trailLength","\x4d","\x63","\xcf","\x2d"),
	HX_HCSTRING("_graphic","\x29","\xb4","\xbf","\xad"),
	HX_HCSTRING("_transp","\xe7","\x9c","\xfc","\xb3"),
	HX_HCSTRING("_difference","\x1c","\x69","\x1b","\x19"),
	HX_HCSTRING("_recentPositions","\x10","\x4e","\xba","\xee"),
	HX_HCSTRING("_recentAngles","\x1a","\xdf","\x8c","\x9a"),
	HX_HCSTRING("_recentScales","\x83","\xb4","\x99","\x73"),
	HX_HCSTRING("_recentFrames","\x80","\x79","\xf9","\xe3"),
	HX_HCSTRING("_recentFlipX","\x71","\xf4","\x17","\xa0"),
	HX_HCSTRING("_recentFlipY","\x72","\xf4","\x17","\xa0"),
	HX_HCSTRING("_recentAnimations","\xc9","\xf3","\x02","\x00"),
	HX_HCSTRING("_spriteOrigin","\xaa","\x4e","\x52","\xc5"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("cacheValue","\xcf","\xe5","\x70","\x74"),
	HX_HCSTRING("resetTrail","\x77","\xcb","\xbb","\xfe"),
	HX_HCSTRING("increaseLength","\x48","\x82","\xf7","\x59"),
	HX_HCSTRING("changeGraphic","\x18","\xff","\xdb","\xd4"),
	HX_HCSTRING("changeValuesEnabled","\x2f","\xe1","\xd5","\x2f"),
	::String(null()) };

static void FlxTrail_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTrail_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTrail_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTrail_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTrail_obj::__mClass;

void FlxTrail_obj::__register()
{
	hx::Object *dummy = new FlxTrail_obj;
	FlxTrail_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.effects.FlxTrail","\x09","\xf3","\xcd","\x16");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTrail_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTrail_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTrail_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTrail_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTrail_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTrail_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace effects
