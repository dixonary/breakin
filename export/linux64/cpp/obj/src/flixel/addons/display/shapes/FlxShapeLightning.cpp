// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_shapes_FlxShape
#include <flixel/addons/display/shapes/FlxShape.h>
#endif
#ifndef INCLUDED_flixel_addons_display_shapes_FlxShapeLightning
#include <flixel/addons/display/shapes/FlxShapeLightning.h>
#endif
#ifndef INCLUDED_flixel_addons_display_shapes_FlxShapeLine
#include <flixel/addons/display/shapes/FlxShapeLine.h>
#endif
#ifndef INCLUDED_flixel_addons_display_shapes_FlxShapeType
#include <flixel/addons/display/shapes/FlxShapeType.h>
#endif
#ifndef INCLUDED_flixel_addons_display_shapes_LineSegment
#include <flixel/addons/display/shapes/LineSegment.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxVector
#include <flixel/math/FlxVector.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_CapsStyle
#include <openfl/_legacy/display/CapsStyle.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_JointStyle
#include <openfl/_legacy/display/JointStyle.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_LineScaleMode
#include <openfl/_legacy/display/LineScaleMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_filters_BitmapFilter
#include <openfl/_legacy/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl__legacy_filters_GlowFilter
#include <openfl/_legacy/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Matrix
#include <openfl/_legacy/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_df84d49fbcba9da4_20_new,"flixel.addons.display.shapes.FlxShapeLightning","new",0xbf0334c6,"flixel.addons.display.shapes.FlxShapeLightning.new","flixel/addons/display/shapes/FlxShapeLightning.hx",20,0xdb65696a)
static const int _hx_array_data_90d419d4_1[] = {
	(int)-7820562,(int)-11184692,(int)-13417336,
};
HX_LOCAL_STACK_FRAME(_hx_pos_df84d49fbcba9da4_78_addSegment,"flixel.addons.display.shapes.FlxShapeLightning","addSegment",0x92378fec,"flixel.addons.display.shapes.FlxShapeLightning.addSegment","flixel/addons/display/shapes/FlxShapeLightning.hx",78,0xdb65696a)
HX_LOCAL_STACK_FRAME(_hx_pos_df84d49fbcba9da4_82_calculate,"flixel.addons.display.shapes.FlxShapeLightning","calculate",0x654a4a4c,"flixel.addons.display.shapes.FlxShapeLightning.calculate","flixel/addons/display/shapes/FlxShapeLightning.hx",82,0xdb65696a)
HX_LOCAL_STACK_FRAME(_hx_pos_df84d49fbcba9da4_103_set_lightningStyle,"flixel.addons.display.shapes.FlxShapeLightning","set_lightningStyle",0xae9e695e,"flixel.addons.display.shapes.FlxShapeLightning.set_lightningStyle","flixel/addons/display/shapes/FlxShapeLightning.hx",103,0xdb65696a)
HX_LOCAL_STACK_FRAME(_hx_pos_df84d49fbcba9da4_110_copyLineStyle,"flixel.addons.display.shapes.FlxShapeLightning","copyLineStyle",0xf6d14e0e,"flixel.addons.display.shapes.FlxShapeLightning.copyLineStyle","flixel/addons/display/shapes/FlxShapeLightning.hx",110,0xdb65696a)
HX_LOCAL_STACK_FRAME(_hx_pos_df84d49fbcba9da4_125_drawSpecificShape,"flixel.addons.display.shapes.FlxShapeLightning","drawSpecificShape",0x7df14951,"flixel.addons.display.shapes.FlxShapeLightning.drawSpecificShape","flixel/addons/display/shapes/FlxShapeLightning.hx",125,0xdb65696a)
HX_LOCAL_STACK_FRAME(_hx_pos_df84d49fbcba9da4_202_redrawFilter,"flixel.addons.display.shapes.FlxShapeLightning","redrawFilter",0x0de79b29,"flixel.addons.display.shapes.FlxShapeLightning.redrawFilter","flixel/addons/display/shapes/FlxShapeLightning.hx",202,0xdb65696a)
HX_LOCAL_STACK_FRAME(_hx_pos_df84d49fbcba9da4_246_update,"flixel.addons.display.shapes.FlxShapeLightning","update",0x3c786563,"flixel.addons.display.shapes.FlxShapeLightning.update","flixel/addons/display/shapes/FlxShapeLightning.hx",246,0xdb65696a)
HX_LOCAL_STACK_FRAME(_hx_pos_df84d49fbcba9da4_250_fixBoundaries,"flixel.addons.display.shapes.FlxShapeLightning","fixBoundaries",0x21caade3,"flixel.addons.display.shapes.FlxShapeLightning.fixBoundaries","flixel/addons/display/shapes/FlxShapeLightning.hx",250,0xdb65696a)
HX_LOCAL_STACK_FRAME(_hx_pos_df84d49fbcba9da4_260_get_strokeBuffer,"flixel.addons.display.shapes.FlxShapeLightning","get_strokeBuffer",0x2503bf3b,"flixel.addons.display.shapes.FlxShapeLightning.get_strokeBuffer","flixel/addons/display/shapes/FlxShapeLightning.hx",260,0xdb65696a)
HX_LOCAL_STACK_FRAME(_hx_pos_df84d49fbcba9da4_270_getStrokeOffsetX,"flixel.addons.display.shapes.FlxShapeLightning","getStrokeOffsetX",0x73c1e1f1,"flixel.addons.display.shapes.FlxShapeLightning.getStrokeOffsetX","flixel/addons/display/shapes/FlxShapeLightning.hx",270,0xdb65696a)
HX_LOCAL_STACK_FRAME(_hx_pos_df84d49fbcba9da4_275_getStrokeOffsetY,"flixel.addons.display.shapes.FlxShapeLightning","getStrokeOffsetY",0x73c1e1f2,"flixel.addons.display.shapes.FlxShapeLightning.getStrokeOffsetY","flixel/addons/display/shapes/FlxShapeLightning.hx",275,0xdb65696a)
namespace flixel{
namespace addons{
namespace display{
namespace shapes{

void FlxShapeLightning_obj::__construct(Float X,Float Y, ::flixel::math::FlxPoint A, ::flixel::math::FlxPoint B, ::Dynamic Style,hx::Null< bool >  __o_UseDefaults){
bool UseDefaults = __o_UseDefaults.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_df84d49fbcba9da4_20_new)
HXLINE( 266)		this->expandDown = ((Float)0);
HXLINE( 265)		this->expandUp = ((Float)0);
HXLINE( 264)		this->expandRight = ((Float)0);
HXLINE( 263)		this->expandLeft = ((Float)0);
HXLINE(  44)		{
HXLINE(  44)			this->lightningStyle = Style;
HXDLIN(  44)			this->shapeDirty = true;
            		}
HXLINE(  46)		Float v = (A->x - B->x);
HXDLIN(  46)		 ::flixel::math::FlxVector v1 =  ::flixel::math::FlxVector_obj::__alloc( HX_CTX ,v,(A->y - B->y));
HXLINE(  47)		Float _hx_tmp = (v1->x * v1->x);
HXDLIN(  47)		this->magnitude = ::Math_obj::sqrt((_hx_tmp + (v1->y * v1->y)));
HXLINE(  49)		if (UseDefaults) {
HXLINE(  51)			if (hx::IsNull( this->lightningStyle->__Field(HX_("displacement",d7,52,23,1d),hx::paccDynamic) )) {
HXLINE(  53)				this->lightningStyle->__SetField(HX_("displacement",d7,52,23,1d),((Float)25.0),hx::paccDynamic);
            			}
HXLINE(  55)			if (hx::IsNull( this->lightningStyle->__Field(HX_("detail",91,62,1f,70),hx::paccDynamic) )) {
HXLINE(  57)				this->lightningStyle->__SetField(HX_("detail",91,62,1f,70),((Float)1.0),hx::paccDynamic);
            			}
HXLINE(  59)			if (hx::IsNull( ( (::Array< int >)(this->lightningStyle->__Field(HX_("halo_colors",13,9d,48,36),hx::paccDynamic)) ) )) {
HXLINE(  61)				this->lightningStyle->__SetField(HX_("halo_colors",13,9d,48,36),::Array_obj< int >::fromData( _hx_array_data_90d419d4_1,3),hx::paccDynamic);
            			}
            		}
HXLINE(  65)		this->list_segs = ::Array_obj< ::Dynamic>::__new();
HXLINE(  66)		this->list_branch = ::Array_obj< ::Dynamic>::__new();
HXLINE(  68)		super::__construct(X,Y,A,B, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("color",63,71,5c,4a), ::Dynamic(this->lightningStyle->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)))
            			->setFixed(1,HX_("thickness",74,f1,66,5a), ::Dynamic(this->lightningStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic)))));
HXLINE(  71)		this->calculate(A,B,( (Float)(this->lightningStyle->__Field(HX_("displacement",d7,52,23,1d),hx::paccDynamic)) ),(int)0);
HXLINE(  73)		this->shape_id = ::flixel::addons::display::shapes::FlxShapeType_obj::LIGHTNING_dyn();
            	}

Dynamic FlxShapeLightning_obj::__CreateEmpty() { return new FlxShapeLightning_obj; }

void *FlxShapeLightning_obj::_hx_vtable = 0;

Dynamic FlxShapeLightning_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxShapeLightning_obj > _hx_result = new FlxShapeLightning_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool FlxShapeLightning_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		if (inClassId<=(int)0x5191b008) {
			return inClassId==(int)0x4d13d1da || inClassId==(int)0x5191b008;
		} else {
			return inClassId==(int)0x63842510;
		}
	}
}

void FlxShapeLightning_obj::addSegment(Float Ax,Float Ay,Float Bx,Float By){
            	HX_GC_STACKFRAME(&_hx_pos_df84d49fbcba9da4_78_addSegment)
HXDLIN(  78)		::Array< ::Dynamic> _hx_tmp = this->list_segs;
HXDLIN(  78)		_hx_tmp->push( ::flixel::addons::display::shapes::LineSegment_obj::__alloc( HX_CTX ,Ax,Ay,Bx,By));
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxShapeLightning_obj,addSegment,(void))

void FlxShapeLightning_obj::calculate( ::flixel::math::FlxPoint A, ::flixel::math::FlxPoint B,Float Displacement,int Iteration){
            	HX_GC_STACKFRAME(&_hx_pos_df84d49fbcba9da4_82_calculate)
HXLINE(  83)		if (hx::IsLess( Displacement,this->lightningStyle->__Field(HX_("detail",91,62,1f,70),hx::paccDynamic) )) {
HXLINE(  85)			::Array< ::Dynamic> _hx_tmp = this->list_segs;
HXDLIN(  85)			_hx_tmp->push( ::flixel::addons::display::shapes::LineSegment_obj::__alloc( HX_CTX ,A->x,A->y,B->x,B->y));
            		}
            		else {
HXLINE(  89)			 ::flixel::math::FlxPoint mid =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  90)			mid->set_x(((Float)(A->x + B->x) / (Float)(int)2));
HXLINE(  91)			mid->set_y(((Float)(A->y + B->y) / (Float)(int)2));
HXLINE(  92)			Float dispX = ::flixel::FlxG_obj::random->_hx_float(((Float)-0.5),((Float)0.5),null());
HXLINE(  93)			Float dispY = ::flixel::FlxG_obj::random->_hx_float(((Float)-0.5),((Float)0.5),null());
HXLINE(  94)			{
HXLINE(  94)				 ::flixel::math::FlxPoint _g = mid;
HXDLIN(  94)				Float _g1 = _g->x;
HXDLIN(  94)				_g->set_x((_g1 + (dispX * Displacement)));
            			}
HXLINE(  95)			{
HXLINE(  95)				 ::flixel::math::FlxPoint _g2 = mid;
HXDLIN(  95)				Float _g3 = _g2->y;
HXDLIN(  95)				_g2->set_y((_g3 + (dispY * Displacement)));
            			}
HXLINE(  96)			this->calculate(A,mid,((Float)Displacement / (Float)(int)2),Iteration);
HXLINE(  97)			this->calculate(B,mid,((Float)Displacement / (Float)(int)2),Iteration);
            		}
HXLINE(  99)		this->shapeDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxShapeLightning_obj,calculate,(void))

 ::Dynamic FlxShapeLightning_obj::set_lightningStyle( ::Dynamic Style){
            	HX_STACKFRAME(&_hx_pos_df84d49fbcba9da4_103_set_lightningStyle)
HXLINE( 104)		this->lightningStyle = Style;
HXLINE( 105)		this->shapeDirty = true;
HXLINE( 106)		return this->lightningStyle;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxShapeLightning_obj,set_lightningStyle,return )

 ::Dynamic FlxShapeLightning_obj::copyLineStyle( ::Dynamic ls){
            	HX_STACKFRAME(&_hx_pos_df84d49fbcba9da4_110_copyLineStyle)
HXLINE( 111)		 ::Dynamic ls2 =  ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("capsStyle",50,61,32,83), ::Dynamic(ls->__Field(HX_("capsStyle",50,61,32,83),hx::paccDynamic)))
            			->setFixed(1,HX_("jointStyle",87,ef,1c,e2), ::Dynamic(ls->__Field(HX_("jointStyle",87,ef,1c,e2),hx::paccDynamic)))
            			->setFixed(2,HX_("scaleMode",0d,db,d3,2b), ::Dynamic(ls->__Field(HX_("scaleMode",0d,db,d3,2b),hx::paccDynamic)))
            			->setFixed(3,HX_("color",63,71,5c,4a), ::Dynamic(ls->__Field(HX_("color",63,71,5c,4a),hx::paccDynamic)))
            			->setFixed(4,HX_("miterLimit",f6,5c,6a,54), ::Dynamic(ls->__Field(HX_("miterLimit",f6,5c,6a,54),hx::paccDynamic)))
            			->setFixed(5,HX_("thickness",74,f1,66,5a), ::Dynamic(ls->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic)))
            			->setFixed(6,HX_("pixelHinting",d5,9b,fb,6c), ::Dynamic(ls->__Field(HX_("pixelHinting",d5,9b,fb,6c),hx::paccDynamic))));
HXLINE( 121)		return ls2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxShapeLightning_obj,copyLineStyle,return )

void FlxShapeLightning_obj::drawSpecificShape( ::openfl::_legacy::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_df84d49fbcba9da4_125_drawSpecificShape)
HXLINE( 126)		Float up = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 127)		Float left = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 128)		Float down = (int)0;
HXLINE( 129)		Float right = (int)0;
HXLINE( 131)		{
HXLINE( 131)			int _g = (int)0;
HXDLIN( 131)			::Array< ::Dynamic> _g1 = this->list_segs;
HXDLIN( 131)			while((_g < _g1->length)){
HXLINE( 131)				 ::flixel::addons::display::shapes::LineSegment l = _g1->__get(_g).StaticCast<  ::flixel::addons::display::shapes::LineSegment >();
HXDLIN( 131)				_g = (_g + (int)1);
HXLINE( 133)				if ((l->ax < left)) {
HXLINE( 133)					left = l->ax;
            				}
HXLINE( 134)				if ((l->bx < left)) {
HXLINE( 134)					left = l->bx;
            				}
HXLINE( 135)				if ((l->ay < up)) {
HXLINE( 135)					up = l->ay;
            				}
HXLINE( 136)				if ((l->by < up)) {
HXLINE( 136)					up = l->by;
            				}
HXLINE( 137)				if ((l->ax > right)) {
HXLINE( 137)					right = l->ax;
            				}
HXLINE( 138)				if ((l->bx > right)) {
HXLINE( 138)					right = l->bx;
            				}
HXLINE( 139)				if ((l->ay > down)) {
HXLINE( 139)					down = l->ay;
            				}
HXLINE( 140)				if ((l->by > down)) {
HXLINE( 140)					down = l->by;
            				}
            			}
            		}
HXLINE( 143)		if ((left < (int)0)) {
HXLINE( 145)			this->expandLeft = (left * (int)-1);
            		}
HXLINE( 147)		if ((right > this->shapeWidth)) {
HXLINE( 149)			this->expandRight = (this->shapeWidth - right);
            		}
HXLINE( 151)		if ((up < (int)0)) {
HXLINE( 153)			this->expandUp = (up * (int)-1);
            		}
HXLINE( 155)		if ((down > this->shapeHeight)) {
HXLINE( 157)			this->expandDown = (this->shapeHeight - down);
            		}
HXLINE( 161)		Float newWidth = (right - left);
HXLINE( 162)		Float newHeight = (down - up);
HXLINE( 165)		int canvasWidth = ::Std_obj::_hx_int((newWidth + this->get_strokeBuffer()));
HXLINE( 166)		int canvasHeight = ::Std_obj::_hx_int((newHeight + this->get_strokeBuffer()));
HXLINE( 168)		this->offset->set_x((int)0);
HXLINE( 169)		this->offset->set_y((int)0);
HXLINE( 171)		bool _hx_tmp;
HXDLIN( 171)		if ((canvasWidth == this->get_pixels()->get_width())) {
HXLINE( 171)			_hx_tmp = (canvasHeight != this->get_pixels()->get_height());
            		}
            		else {
HXLINE( 171)			_hx_tmp = true;
            		}
HXDLIN( 171)		if (_hx_tmp) {
HXLINE( 173)			this->makeGraphic(canvasWidth,canvasHeight,(int)0,true,null());
            		}
            		else {
HXLINE( 177)			 ::openfl::_legacy::display::BitmapData _hx_tmp1 = this->get_pixels();
HXDLIN( 177)			_hx_tmp1->fillRect(this->get_pixels()->get_rect(),(int)0);
            		}
HXLINE( 180)		this->_matrix->identity();
HXLINE( 182)		int dw = (int)0;
HXLINE( 183)		int dh = (int)0;
HXLINE( 186)		dw = ::Std_obj::_hx_int(((Float)this->get_strokeBuffer() / (Float)(int)2));
HXLINE( 187)		dh = ::Std_obj::_hx_int(((Float)this->get_strokeBuffer() / (Float)(int)2));
HXLINE( 189)		if ((left < (int)0)) {
HXLINE( 189)			dw = ::Std_obj::_hx_int((-(left) + ((Float)this->get_strokeBuffer() / (Float)(int)2)));
            		}
HXLINE( 190)		if ((up < (int)0)) {
HXLINE( 190)			dh = ::Std_obj::_hx_int((-(up) + ((Float)this->get_strokeBuffer() / (Float)(int)2)));
            		}
HXLINE( 192)		{
HXLINE( 192)			int _g2 = (int)0;
HXDLIN( 192)			::Array< ::Dynamic> _g11 = this->list_segs;
HXDLIN( 192)			while((_g2 < _g11->length)){
HXLINE( 192)				 ::flixel::addons::display::shapes::LineSegment l1 = _g11->__get(_g2).StaticCast<  ::flixel::addons::display::shapes::LineSegment >();
HXDLIN( 192)				_g2 = (_g2 + (int)1);
HXLINE( 194)				Float _hx_tmp2 = (l1->ax + dw);
HXDLIN( 194)				Float _hx_tmp3 = (l1->ay + dh);
HXDLIN( 194)				Float _hx_tmp4 = (l1->bx + dw);
HXDLIN( 194)				::flixel::util::FlxSpriteUtil_obj::drawLine(hx::ObjectPtr<OBJ_>(this),_hx_tmp2,_hx_tmp3,_hx_tmp4,(l1->by + dh),this->lineStyle,null());
            			}
            		}
HXLINE( 197)		this->redrawFilter();
HXLINE( 198)		this->shapeDirty = true;
            	}


void FlxShapeLightning_obj::redrawFilter(){
            	HX_GC_STACKFRAME(&_hx_pos_df84d49fbcba9da4_202_redrawFilter)
HXLINE( 203)		bool skip = false;
HXLINE( 204)		if (hx::IsNull( ( (::Array< int >)(this->lightningStyle->__Field(HX_("halo_colors",13,9d,48,36),hx::paccDynamic)) ) )) {
HXLINE( 206)			return;
            		}
HXLINE( 209)		if (!(skip)) {
HXLINE( 211)			int i = (int)0;
HXLINE( 212)			::Array< ::Dynamic> a = ::Array_obj< ::Dynamic>::__new();
HXLINE( 213)			{
HXLINE( 213)				int _g = (int)0;
HXDLIN( 213)				::Array< int > _g1 = ( (::Array< int >)(this->lightningStyle->__Field(HX_("halo_colors",13,9d,48,36),hx::paccDynamic)) );
HXDLIN( 213)				while((_g < _g1->length)){
HXLINE( 213)					int halo_color = _g1->__get(_g);
HXDLIN( 213)					_g = (_g + (int)1);
HXLINE( 215)					a->push( ::openfl::_legacy::filters::GlowFilter_obj::__alloc( HX_CTX ,halo_color,(((Float)1.0) - (((Float)0.15) * i)),(int)3,(int)3,null(),null(),null(),null()));
HXLINE( 216)					i = (i + (int)1);
            				}
            			}
HXLINE( 219)			{
HXLINE( 219)				int _g2 = (int)0;
HXDLIN( 219)				while((_g2 < a->length)){
HXLINE( 219)					 ::openfl::_legacy::filters::GlowFilter gf = a->__get(_g2).StaticCast<  ::openfl::_legacy::filters::GlowFilter >();
HXDLIN( 219)					_g2 = (_g2 + (int)1);
HXLINE( 221)					 ::openfl::_legacy::display::BitmapData pixels2 = this->get_pixels()->clone();
HXLINE( 222)					 ::openfl::_legacy::display::BitmapData _hx_tmp = this->get_pixels();
HXDLIN( 222)					 ::openfl::_legacy::geom::Rectangle _hx_tmp1 = this->get_pixels()->get_rect();
HXDLIN( 222)					pixels2->applyFilter(_hx_tmp,_hx_tmp1,this->_flashPointZero,gf);
HXLINE( 225)					Float w = this->get_width();
HXLINE( 226)					Float h = this->get_height();
HXLINE( 227)					Float ox = this->offset->x;
HXLINE( 228)					Float oy = this->offset->y;
HXLINE( 231)					this->set_pixels(pixels2);
HXLINE( 234)					this->set_width(w);
HXLINE( 235)					this->set_height(h);
HXLINE( 236)					this->offset->set_x(ox);
HXLINE( 237)					this->offset->set_y(oy);
            				}
            			}
HXLINE( 240)			{
HXLINE( 240)				Float trueWidth = this->shapeWidth;
HXDLIN( 240)				Float trueHeight = this->shapeHeight;
HXDLIN( 240)				this->set_width(this->shapeWidth);
HXDLIN( 240)				this->set_height(this->shapeHeight);
HXDLIN( 240)				 ::flixel::math::FlxPoint _hx_tmp2 = this->offset;
HXDLIN( 240)				Float _hx_tmp3 = this->expandLeft;
HXDLIN( 240)				_hx_tmp2->set_x((_hx_tmp3 + this->getStrokeOffsetX()));
HXDLIN( 240)				 ::flixel::math::FlxPoint _hx_tmp4 = this->offset;
HXDLIN( 240)				Float _hx_tmp5 = this->expandUp;
HXDLIN( 240)				_hx_tmp4->set_y((_hx_tmp5 + this->getStrokeOffsetY()));
HXDLIN( 240)				this->updateMotion((int)0);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxShapeLightning_obj,redrawFilter,(void))

void FlxShapeLightning_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_df84d49fbcba9da4_246_update)
HXDLIN( 246)		this->super::update(elapsed);
            	}


void FlxShapeLightning_obj::fixBoundaries(Float trueWidth,Float trueHeight){
            	HX_STACKFRAME(&_hx_pos_df84d49fbcba9da4_250_fixBoundaries)
HXLINE( 251)		this->set_width(this->shapeWidth);
HXLINE( 252)		this->set_height(this->shapeHeight);
HXLINE( 253)		 ::flixel::math::FlxPoint _hx_tmp = this->offset;
HXDLIN( 253)		Float _hx_tmp1 = this->expandLeft;
HXDLIN( 253)		_hx_tmp->set_x((_hx_tmp1 + this->getStrokeOffsetX()));
HXLINE( 254)		 ::flixel::math::FlxPoint _hx_tmp2 = this->offset;
HXDLIN( 254)		Float _hx_tmp3 = this->expandUp;
HXDLIN( 254)		_hx_tmp2->set_y((_hx_tmp3 + this->getStrokeOffsetY()));
HXLINE( 255)		this->updateMotion((int)0);
            	}


Float FlxShapeLightning_obj::get_strokeBuffer(){
            	HX_STACKFRAME(&_hx_pos_df84d49fbcba9da4_260_get_strokeBuffer)
HXDLIN( 260)		return (this->lightningStyle->__Field(HX_("thickness",74,f1,66,5a),hx::paccDynamic) * (int)2);
            	}


Float FlxShapeLightning_obj::getStrokeOffsetX(){
            	HX_STACKFRAME(&_hx_pos_df84d49fbcba9da4_270_getStrokeOffsetX)
HXDLIN( 270)		return ((Float)this->get_strokeBuffer() / (Float)(int)2);
            	}


Float FlxShapeLightning_obj::getStrokeOffsetY(){
            	HX_STACKFRAME(&_hx_pos_df84d49fbcba9da4_275_getStrokeOffsetY)
HXDLIN( 275)		return ((Float)this->get_strokeBuffer() / (Float)(int)2);
            	}



hx::ObjectPtr< FlxShapeLightning_obj > FlxShapeLightning_obj::__new(Float X,Float Y, ::flixel::math::FlxPoint A, ::flixel::math::FlxPoint B, ::Dynamic Style,hx::Null< bool >  __o_UseDefaults) {
	hx::ObjectPtr< FlxShapeLightning_obj > __this = new FlxShapeLightning_obj();
	__this->__construct(X,Y,A,B,Style,__o_UseDefaults);
	return __this;
}

hx::ObjectPtr< FlxShapeLightning_obj > FlxShapeLightning_obj::__alloc(hx::Ctx *_hx_ctx,Float X,Float Y, ::flixel::math::FlxPoint A, ::flixel::math::FlxPoint B, ::Dynamic Style,hx::Null< bool >  __o_UseDefaults) {
	FlxShapeLightning_obj *__this = (FlxShapeLightning_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxShapeLightning_obj), true, "flixel.addons.display.shapes.FlxShapeLightning"));
	*(void **)__this = FlxShapeLightning_obj::_hx_vtable;
	__this->__construct(X,Y,A,B,Style,__o_UseDefaults);
	return __this;
}

FlxShapeLightning_obj::FlxShapeLightning_obj()
{
}

void FlxShapeLightning_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxShapeLightning);
	HX_MARK_MEMBER_NAME(lightningStyle,"lightningStyle");
	HX_MARK_MEMBER_NAME(detail,"detail");
	HX_MARK_MEMBER_NAME(magnitude,"magnitude");
	HX_MARK_MEMBER_NAME(list_segs,"list_segs");
	HX_MARK_MEMBER_NAME(list_branch,"list_branch");
	HX_MARK_MEMBER_NAME(expandLeft,"expandLeft");
	HX_MARK_MEMBER_NAME(expandRight,"expandRight");
	HX_MARK_MEMBER_NAME(expandUp,"expandUp");
	HX_MARK_MEMBER_NAME(expandDown,"expandDown");
	 ::flixel::addons::display::shapes::FlxShapeLine_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxShapeLightning_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lightningStyle,"lightningStyle");
	HX_VISIT_MEMBER_NAME(detail,"detail");
	HX_VISIT_MEMBER_NAME(magnitude,"magnitude");
	HX_VISIT_MEMBER_NAME(list_segs,"list_segs");
	HX_VISIT_MEMBER_NAME(list_branch,"list_branch");
	HX_VISIT_MEMBER_NAME(expandLeft,"expandLeft");
	HX_VISIT_MEMBER_NAME(expandRight,"expandRight");
	HX_VISIT_MEMBER_NAME(expandUp,"expandUp");
	HX_VISIT_MEMBER_NAME(expandDown,"expandDown");
	 ::flixel::addons::display::shapes::FlxShapeLine_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxShapeLightning_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"detail") ) { return hx::Val( detail ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"expandUp") ) { return hx::Val( expandUp ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"magnitude") ) { return hx::Val( magnitude ); }
		if (HX_FIELD_EQ(inName,"list_segs") ) { return hx::Val( list_segs ); }
		if (HX_FIELD_EQ(inName,"calculate") ) { return hx::Val( calculate_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addSegment") ) { return hx::Val( addSegment_dyn() ); }
		if (HX_FIELD_EQ(inName,"expandLeft") ) { return hx::Val( expandLeft ); }
		if (HX_FIELD_EQ(inName,"expandDown") ) { return hx::Val( expandDown ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"list_branch") ) { return hx::Val( list_branch ); }
		if (HX_FIELD_EQ(inName,"expandRight") ) { return hx::Val( expandRight ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"redrawFilter") ) { return hx::Val( redrawFilter_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyLineStyle") ) { return hx::Val( copyLineStyle_dyn() ); }
		if (HX_FIELD_EQ(inName,"fixBoundaries") ) { return hx::Val( fixBoundaries_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"lightningStyle") ) { return hx::Val( lightningStyle ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_strokeBuffer") ) { return hx::Val( get_strokeBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"getStrokeOffsetX") ) { return hx::Val( getStrokeOffsetX_dyn() ); }
		if (HX_FIELD_EQ(inName,"getStrokeOffsetY") ) { return hx::Val( getStrokeOffsetY_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"drawSpecificShape") ) { return hx::Val( drawSpecificShape_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"set_lightningStyle") ) { return hx::Val( set_lightningStyle_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxShapeLightning_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"detail") ) { detail=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"expandUp") ) { expandUp=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"magnitude") ) { magnitude=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"list_segs") ) { list_segs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"expandLeft") ) { expandLeft=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"expandDown") ) { expandDown=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"list_branch") ) { list_branch=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"expandRight") ) { expandRight=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"lightningStyle") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_lightningStyle(inValue.Cast<  ::Dynamic >()) );lightningStyle=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxShapeLightning_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("lightningStyle","\xc7","\xd7","\xe3","\xea"));
	outFields->push(HX_HCSTRING("detail","\x91","\x62","\x1f","\x70"));
	outFields->push(HX_HCSTRING("magnitude","\xd0","\x33","\x64","\xf5"));
	outFields->push(HX_HCSTRING("list_segs","\xff","\xf1","\x74","\x82"));
	outFields->push(HX_HCSTRING("list_branch","\xa3","\x5b","\x3e","\x6b"));
	outFields->push(HX_HCSTRING("expandLeft","\x81","\x57","\x1b","\x48"));
	outFields->push(HX_HCSTRING("expandRight","\x22","\x47","\xde","\x46"));
	outFields->push(HX_HCSTRING("expandUp","\x55","\x03","\xcf","\xf9"));
	outFields->push(HX_HCSTRING("expandDown","\xdc","\x47","\xd9","\x42"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxShapeLightning_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxShapeLightning_obj,lightningStyle),HX_HCSTRING("lightningStyle","\xc7","\xd7","\xe3","\xea")},
	{hx::fsFloat,(int)offsetof(FlxShapeLightning_obj,detail),HX_HCSTRING("detail","\x91","\x62","\x1f","\x70")},
	{hx::fsFloat,(int)offsetof(FlxShapeLightning_obj,magnitude),HX_HCSTRING("magnitude","\xd0","\x33","\x64","\xf5")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxShapeLightning_obj,list_segs),HX_HCSTRING("list_segs","\xff","\xf1","\x74","\x82")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxShapeLightning_obj,list_branch),HX_HCSTRING("list_branch","\xa3","\x5b","\x3e","\x6b")},
	{hx::fsFloat,(int)offsetof(FlxShapeLightning_obj,expandLeft),HX_HCSTRING("expandLeft","\x81","\x57","\x1b","\x48")},
	{hx::fsFloat,(int)offsetof(FlxShapeLightning_obj,expandRight),HX_HCSTRING("expandRight","\x22","\x47","\xde","\x46")},
	{hx::fsFloat,(int)offsetof(FlxShapeLightning_obj,expandUp),HX_HCSTRING("expandUp","\x55","\x03","\xcf","\xf9")},
	{hx::fsFloat,(int)offsetof(FlxShapeLightning_obj,expandDown),HX_HCSTRING("expandDown","\xdc","\x47","\xd9","\x42")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxShapeLightning_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxShapeLightning_obj_sMemberFields[] = {
	HX_HCSTRING("lightningStyle","\xc7","\xd7","\xe3","\xea"),
	HX_HCSTRING("detail","\x91","\x62","\x1f","\x70"),
	HX_HCSTRING("magnitude","\xd0","\x33","\x64","\xf5"),
	HX_HCSTRING("list_segs","\xff","\xf1","\x74","\x82"),
	HX_HCSTRING("list_branch","\xa3","\x5b","\x3e","\x6b"),
	HX_HCSTRING("addSegment","\x92","\xfb","\x58","\x0e"),
	HX_HCSTRING("calculate","\x66","\x95","\x6a","\x05"),
	HX_HCSTRING("set_lightningStyle","\x04","\xeb","\x2c","\x63"),
	HX_HCSTRING("copyLineStyle","\x28","\x2e","\xde","\x2c"),
	HX_HCSTRING("drawSpecificShape","\x6b","\x3e","\x59","\x64"),
	HX_HCSTRING("redrawFilter","\x4f","\xbc","\xf7","\xe5"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("fixBoundaries","\xfd","\x8d","\xd7","\x57"),
	HX_HCSTRING("get_strokeBuffer","\x61","\x6b","\x72","\x5f"),
	HX_HCSTRING("expandLeft","\x81","\x57","\x1b","\x48"),
	HX_HCSTRING("expandRight","\x22","\x47","\xde","\x46"),
	HX_HCSTRING("expandUp","\x55","\x03","\xcf","\xf9"),
	HX_HCSTRING("expandDown","\xdc","\x47","\xd9","\x42"),
	HX_HCSTRING("getStrokeOffsetX","\x17","\x8e","\x30","\xae"),
	HX_HCSTRING("getStrokeOffsetY","\x18","\x8e","\x30","\xae"),
	::String(null()) };

static void FlxShapeLightning_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxShapeLightning_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxShapeLightning_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxShapeLightning_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxShapeLightning_obj::__mClass;

void FlxShapeLightning_obj::__register()
{
	hx::Object *dummy = new FlxShapeLightning_obj;
	FlxShapeLightning_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.display.shapes.FlxShapeLightning","\xd4","\x19","\xd4","\x90");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxShapeLightning_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxShapeLightning_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxShapeLightning_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxShapeLightning_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxShapeLightning_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxShapeLightning_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace display
} // end namespace shapes
