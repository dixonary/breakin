// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFilterFrames
#include <flixel/graphics/frames/FlxFilterFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrameCollectionType
#include <flixel/graphics/frames/FlxFrameCollectionType.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_filters_BitmapFilter
#include <openfl/_legacy/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Point
#include <openfl/_legacy/geom/Point.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_741532f23a714680_17_new,"flixel.graphics.frames.FlxFilterFrames","new",0x52a806cb,"flixel.graphics.frames.FlxFilterFrames.new","flixel/graphics/frames/FlxFilterFrames.hx",17,0x20aafb66)
HX_LOCAL_STACK_FRAME(_hx_pos_741532f23a714680_87_applyToSprite,"flixel.graphics.frames.FlxFilterFrames","applyToSprite",0xf5f46d99,"flixel.graphics.frames.FlxFilterFrames.applyToSprite","flixel/graphics/frames/FlxFilterFrames.hx",87,0x20aafb66)
HX_LOCAL_STACK_FRAME(_hx_pos_741532f23a714680_99_genFrames,"flixel.graphics.frames.FlxFilterFrames","genFrames",0xe134c901,"flixel.graphics.frames.FlxFilterFrames.genFrames","flixel/graphics/frames/FlxFilterFrames.hx",99,0x20aafb66)
HX_LOCAL_STACK_FRAME(_hx_pos_741532f23a714680_130_addFilter,"flixel.graphics.frames.FlxFilterFrames","addFilter",0xef32ad64,"flixel.graphics.frames.FlxFilterFrames.addFilter","flixel/graphics/frames/FlxFilterFrames.hx",130,0x20aafb66)
HX_LOCAL_STACK_FRAME(_hx_pos_741532f23a714680_143_removeFilter,"flixel.graphics.frames.FlxFilterFrames","removeFilter",0xcbf7df51,"flixel.graphics.frames.FlxFilterFrames.removeFilter","flixel/graphics/frames/FlxFilterFrames.hx",143,0x20aafb66)
HX_LOCAL_STACK_FRAME(_hx_pos_741532f23a714680_155_clearFilters,"flixel.graphics.frames.FlxFilterFrames","clearFilters",0xbc5a77e3,"flixel.graphics.frames.FlxFilterFrames.clearFilters","flixel/graphics/frames/FlxFilterFrames.hx",155,0x20aafb66)
HX_LOCAL_STACK_FRAME(_hx_pos_741532f23a714680_164_regenAndApplyFilters,"flixel.graphics.frames.FlxFilterFrames","regenAndApplyFilters",0x9bbb725c,"flixel.graphics.frames.FlxFilterFrames.regenAndApplyFilters","flixel/graphics/frames/FlxFilterFrames.hx",164,0x20aafb66)
HX_LOCAL_STACK_FRAME(_hx_pos_741532f23a714680_170_regenBitmaps,"flixel.graphics.frames.FlxFilterFrames","regenBitmaps",0xe849009c,"flixel.graphics.frames.FlxFilterFrames.regenBitmaps","flixel/graphics/frames/FlxFilterFrames.hx",170,0x20aafb66)
HX_LOCAL_STACK_FRAME(_hx_pos_741532f23a714680_191_applyFilter,"flixel.graphics.frames.FlxFilterFrames","applyFilter",0x9e90f931,"flixel.graphics.frames.FlxFilterFrames.applyFilter","flixel/graphics/frames/FlxFilterFrames.hx",191,0x20aafb66)
HX_LOCAL_STACK_FRAME(_hx_pos_741532f23a714680_205_applyFilters,"flixel.graphics.frames.FlxFilterFrames","applyFilters",0x20491222,"flixel.graphics.frames.FlxFilterFrames.applyFilters","flixel/graphics/frames/FlxFilterFrames.hx",205,0x20aafb66)
HX_LOCAL_STACK_FRAME(_hx_pos_741532f23a714680_210_destroy,"flixel.graphics.frames.FlxFilterFrames","destroy",0x700d74e5,"flixel.graphics.frames.FlxFilterFrames.destroy","flixel/graphics/frames/FlxFilterFrames.hx",210,0x20aafb66)
HX_LOCAL_STACK_FRAME(_hx_pos_741532f23a714680_221_set_filters,"flixel.graphics.frames.FlxFilterFrames","set_filters",0x770f2249,"flixel.graphics.frames.FlxFilterFrames.set_filters","flixel/graphics/frames/FlxFilterFrames.hx",221,0x20aafb66)
HX_LOCAL_STACK_FRAME(_hx_pos_741532f23a714680_34_fromFrames,"flixel.graphics.frames.FlxFilterFrames","fromFrames",0xdc1df1a5,"flixel.graphics.frames.FlxFilterFrames.fromFrames","flixel/graphics/frames/FlxFilterFrames.hx",34,0x20aafb66)
HX_LOCAL_STACK_FRAME(_hx_pos_741532f23a714680_19_boot,"flixel.graphics.frames.FlxFilterFrames","boot",0xf876eb67,"flixel.graphics.frames.FlxFilterFrames.boot","flixel/graphics/frames/FlxFilterFrames.hx",19,0x20aafb66)
HX_LOCAL_STACK_FRAME(_hx_pos_741532f23a714680_20_boot,"flixel.graphics.frames.FlxFilterFrames","boot",0xf876eb67,"flixel.graphics.frames.FlxFilterFrames.boot","flixel/graphics/frames/FlxFilterFrames.hx",20,0x20aafb66)
namespace flixel{
namespace graphics{
namespace frames{

void FlxFilterFrames_obj::__construct( ::flixel::graphics::frames::FlxFramesCollection sourceFrames,hx::Null< int >  __o_widthInc,hx::Null< int >  __o_heightInc,::Array< ::Dynamic> filters){
int widthInc = __o_widthInc.Default(0);
int heightInc = __o_heightInc.Default(0);
            	HX_STACKFRAME(&_hx_pos_741532f23a714680_17_new)
HXLINE(  50)		this->heightInc = (int)0;
HXLINE(  45)		this->widthInc = (int)0;
HXLINE(  60)		super::__construct(null(),::flixel::graphics::frames::FlxFrameCollectionType_obj::FILTER_dyn(),null());
HXLINE(  62)		this->sourceFrames = sourceFrames;
HXLINE(  64)		if ((widthInc >= (int)0)) {
HXLINE(  64)			widthInc = widthInc;
            		}
            		else {
HXLINE(  64)			widthInc = (int)0;
            		}
HXLINE(  65)		if ((heightInc >= (int)0)) {
HXLINE(  65)			heightInc = heightInc;
            		}
            		else {
HXLINE(  65)			heightInc = (int)0;
            		}
HXLINE(  67)		widthInc = ((int)2 * ::Math_obj::ceil((((Float)0.5) * widthInc)));
HXLINE(  68)		heightInc = ((int)2 * ::Math_obj::ceil((((Float)0.5) * heightInc)));
HXLINE(  70)		this->widthInc = widthInc;
HXLINE(  71)		this->heightInc = heightInc;
HXLINE(  73)		::Array< ::Dynamic> _hx_tmp;
HXDLIN(  73)		if (hx::IsNull( filters )) {
HXLINE(  73)			_hx_tmp = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE(  73)			_hx_tmp = filters;
            		}
HXDLIN(  73)		this->set_filters(_hx_tmp);
HXLINE(  75)		this->genFrames();
HXLINE(  76)		this->applyFilters();
            	}

Dynamic FlxFilterFrames_obj::__CreateEmpty() { return new FlxFilterFrames_obj; }

void *FlxFilterFrames_obj::_hx_vtable = 0;

Dynamic FlxFilterFrames_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxFilterFrames_obj > _hx_result = new FlxFilterFrames_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool FlxFilterFrames_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0163a3e9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0163a3e9;
	} else {
		return inClassId==(int)0x5519ed43;
	}
}

void FlxFilterFrames_obj::applyToSprite( ::flixel::FlxSprite spr,hx::Null< bool >  __o_saveAnimations,hx::Null< bool >  __o_updateFrames){
bool saveAnimations = __o_saveAnimations.Default(false);
bool updateFrames = __o_updateFrames.Default(false);
            	HX_STACKFRAME(&_hx_pos_741532f23a714680_87_applyToSprite)
HXLINE(  88)		if (updateFrames) {
HXLINE(  89)			this->set_filters(this->filters);
            		}
HXLINE(  91)		Float w = spr->get_width();
HXLINE(  92)		Float h = spr->get_height();
HXLINE(  93)		spr->setFrames(hx::ObjectPtr<OBJ_>(this),saveAnimations);
HXLINE(  94)		 ::flixel::math::FlxPoint spr1 = spr->offset;
HXDLIN(  94)		Float _hx_tmp = (((Float)0.5) * this->widthInc);
HXDLIN(  94)		spr1->set(_hx_tmp,(((Float)0.5) * this->heightInc));
HXLINE(  95)		spr->setSize(w,h);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxFilterFrames_obj,applyToSprite,(void))

void FlxFilterFrames_obj::genFrames(){
            	HX_GC_STACKFRAME(&_hx_pos_741532f23a714680_99_genFrames)
HXLINE( 100)		 ::openfl::_legacy::display::BitmapData canvas;
HXLINE( 101)		 ::flixel::graphics::FlxGraphic graph;
HXLINE( 102)		 ::flixel::graphics::frames::FlxFrame filterFrame;
HXLINE( 104)		{
HXLINE( 104)			int _g = (int)0;
HXDLIN( 104)			::Array< ::Dynamic> _g1 = this->sourceFrames->frames;
HXDLIN( 104)			while((_g < _g1->length)){
HXLINE( 104)				 ::flixel::graphics::frames::FlxFrame frame = _g1->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 104)				_g = (_g + (int)1);
HXLINE( 106)				int canvas1 = ::Std_obj::_hx_int((frame->sourceSize->x + this->widthInc));
HXDLIN( 106)				canvas =  ::openfl::_legacy::display::BitmapData_obj::__alloc( HX_CTX ,canvas1,::Std_obj::_hx_int((frame->sourceSize->y + this->heightInc)),true,(int)0,null());
HXLINE( 108)				graph = ::flixel::graphics::FlxGraphic_obj::fromBitmapData(canvas,false,null(),false);
HXLINE( 110)				filterFrame = graph->get_imageFrame()->get_frame();
HXLINE( 112)				this->frames->push(filterFrame);
HXLINE( 113)				if (hx::IsNotNull( frame->name )) {
HXLINE( 115)					filterFrame->name = frame->name;
HXLINE( 116)					this->framesHash->set(frame->name,filterFrame);
            				}
            			}
            		}
HXLINE( 120)		this->regenBitmaps(false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxFilterFrames_obj,genFrames,(void))

void FlxFilterFrames_obj::addFilter( ::openfl::_legacy::filters::BitmapFilter filter){
            	HX_STACKFRAME(&_hx_pos_741532f23a714680_130_addFilter)
HXDLIN( 130)		if (hx::IsNotNull( filter )) {
HXLINE( 132)			this->filters->push(filter);
HXLINE( 133)			this->applyFilter(filter);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFilterFrames_obj,addFilter,(void))

void FlxFilterFrames_obj::removeFilter( ::openfl::_legacy::filters::BitmapFilter filter){
            	HX_STACKFRAME(&_hx_pos_741532f23a714680_143_removeFilter)
HXLINE( 144)		bool _hx_tmp;
HXDLIN( 144)		if ((this->filters->length != (int)0)) {
HXLINE( 144)			_hx_tmp = hx::IsNull( filter );
            		}
            		else {
HXLINE( 144)			_hx_tmp = true;
            		}
HXDLIN( 144)		if (_hx_tmp) {
HXLINE( 145)			return;
            		}
HXLINE( 147)		if (this->filters->remove(filter)) {
HXLINE( 148)			this->regenAndApplyFilters();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFilterFrames_obj,removeFilter,(void))

void FlxFilterFrames_obj::clearFilters(){
            	HX_STACKFRAME(&_hx_pos_741532f23a714680_155_clearFilters)
HXLINE( 156)		if ((this->filters->length == (int)0)) {
HXLINE( 157)			return;
            		}
HXLINE( 159)		this->filters->removeRange((int)0,this->filters->length);
HXLINE( 160)		this->regenBitmaps(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxFilterFrames_obj,clearFilters,(void))

void FlxFilterFrames_obj::regenAndApplyFilters(){
            	HX_STACKFRAME(&_hx_pos_741532f23a714680_164_regenAndApplyFilters)
HXLINE( 165)		this->regenBitmaps(null());
HXLINE( 166)		this->applyFilters();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxFilterFrames_obj,regenAndApplyFilters,(void))

void FlxFilterFrames_obj::regenBitmaps(hx::Null< bool >  __o_fill){
bool fill = __o_fill.Default(true);
            	HX_STACKFRAME(&_hx_pos_741532f23a714680_170_regenBitmaps)
HXLINE( 171)		int numFrames = this->frames->length;
HXLINE( 172)		 ::flixel::graphics::frames::FlxFrame frame;
HXLINE( 173)		 ::flixel::graphics::frames::FlxFrame sourceFrame;
HXLINE( 174)		 ::openfl::_legacy::geom::Point frameOffset = ::flixel::graphics::frames::FlxFilterFrames_obj::point;
HXLINE( 176)		{
HXLINE( 176)			int _g1 = (int)0;
HXDLIN( 176)			int _g = numFrames;
HXDLIN( 176)			while((_g1 < _g)){
HXLINE( 176)				_g1 = (_g1 + (int)1);
HXDLIN( 176)				int i = (_g1 - (int)1);
HXLINE( 178)				sourceFrame = this->sourceFrames->frames->__get(i).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXLINE( 179)				frame = this->frames->__get(i).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXLINE( 181)				if (fill) {
HXLINE( 182)					 ::openfl::_legacy::display::BitmapData frame1 = frame->parent->bitmap;
HXDLIN( 182)					frame1->fillRect(frame->parent->bitmap->get_rect(),(int)0);
            				}
HXLINE( 184)				Float _hx_tmp = (this->widthInc * ((Float)0.5));
HXDLIN( 184)				frameOffset->setTo(_hx_tmp,(this->heightInc * ((Float)0.5)));
HXLINE( 186)				sourceFrame->paint(frame->parent->bitmap,frameOffset,true,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFilterFrames_obj,regenBitmaps,(void))

void FlxFilterFrames_obj::applyFilter( ::openfl::_legacy::filters::BitmapFilter filter){
            	HX_STACKFRAME(&_hx_pos_741532f23a714680_191_applyFilter)
HXLINE( 192)		 ::openfl::_legacy::display::BitmapData bitmap;
HXLINE( 194)		{
HXLINE( 194)			int _g = (int)0;
HXDLIN( 194)			::Array< ::Dynamic> _g1 = this->frames;
HXDLIN( 194)			while((_g < _g1->length)){
HXLINE( 194)				 ::flixel::graphics::frames::FlxFrame frame = _g1->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 194)				_g = (_g + (int)1);
HXLINE( 196)				::flixel::graphics::frames::FlxFilterFrames_obj::point->setTo((int)0,(int)0);
HXLINE( 197)				::flixel::graphics::frames::FlxFilterFrames_obj::rect->setTo((int)0,(int)0,frame->sourceSize->x,frame->sourceSize->y);
HXLINE( 198)				bitmap = frame->parent->bitmap;
HXLINE( 199)				bitmap->applyFilter(bitmap,::flixel::graphics::frames::FlxFilterFrames_obj::rect,::flixel::graphics::frames::FlxFilterFrames_obj::point,filter);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFilterFrames_obj,applyFilter,(void))

void FlxFilterFrames_obj::applyFilters(){
            	HX_STACKFRAME(&_hx_pos_741532f23a714680_205_applyFilters)
HXDLIN( 205)		int _g = (int)0;
HXDLIN( 205)		::Array< ::Dynamic> _g1 = this->filters;
HXDLIN( 205)		while((_g < _g1->length)){
HXDLIN( 205)			 ::openfl::_legacy::filters::BitmapFilter filter = _g1->__get(_g).StaticCast<  ::openfl::_legacy::filters::BitmapFilter >();
HXDLIN( 205)			_g = (_g + (int)1);
HXLINE( 206)			this->applyFilter(filter);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxFilterFrames_obj,applyFilters,(void))

void FlxFilterFrames_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_741532f23a714680_210_destroy)
HXLINE( 211)		this->sourceFrames = null();
HXLINE( 212)		this->set_filters(null());
HXLINE( 214)		{
HXLINE( 214)			int _g = (int)0;
HXDLIN( 214)			::Array< ::Dynamic> _g1 = this->frames;
HXDLIN( 214)			while((_g < _g1->length)){
HXLINE( 214)				 ::flixel::graphics::frames::FlxFrame frame = _g1->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 214)				_g = (_g + (int)1);
HXLINE( 215)				frame->parent->destroy();
            			}
            		}
HXLINE( 217)		this->super::destroy();
            	}


::Array< ::Dynamic> FlxFilterFrames_obj::set_filters(::Array< ::Dynamic> value){
            	HX_STACKFRAME(&_hx_pos_741532f23a714680_221_set_filters)
HXLINE( 222)		this->filters = value;
HXLINE( 224)		if (hx::IsNotNull( value )) {
HXLINE( 225)			this->regenAndApplyFilters();
            		}
HXLINE( 227)		return this->filters;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxFilterFrames_obj,set_filters,return )

 ::openfl::_legacy::geom::Point FlxFilterFrames_obj::point;

 ::openfl::_legacy::geom::Rectangle FlxFilterFrames_obj::rect;

 ::flixel::graphics::frames::FlxFilterFrames FlxFilterFrames_obj::fromFrames( ::flixel::graphics::frames::FlxFramesCollection frames,hx::Null< int >  __o_widthInc,hx::Null< int >  __o_heightInc,::Array< ::Dynamic> filters){
int widthInc = __o_widthInc.Default(0);
int heightInc = __o_heightInc.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_741532f23a714680_34_fromFrames)
HXDLIN(  34)		return  ::flixel::graphics::frames::FlxFilterFrames_obj::__alloc( HX_CTX ,frames,widthInc,heightInc,filters);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxFilterFrames_obj,fromFrames,return )


hx::ObjectPtr< FlxFilterFrames_obj > FlxFilterFrames_obj::__new( ::flixel::graphics::frames::FlxFramesCollection sourceFrames,hx::Null< int >  __o_widthInc,hx::Null< int >  __o_heightInc,::Array< ::Dynamic> filters) {
	hx::ObjectPtr< FlxFilterFrames_obj > __this = new FlxFilterFrames_obj();
	__this->__construct(sourceFrames,__o_widthInc,__o_heightInc,filters);
	return __this;
}

hx::ObjectPtr< FlxFilterFrames_obj > FlxFilterFrames_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::graphics::frames::FlxFramesCollection sourceFrames,hx::Null< int >  __o_widthInc,hx::Null< int >  __o_heightInc,::Array< ::Dynamic> filters) {
	FlxFilterFrames_obj *__this = (FlxFilterFrames_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxFilterFrames_obj), true, "flixel.graphics.frames.FlxFilterFrames"));
	*(void **)__this = FlxFilterFrames_obj::_hx_vtable;
	__this->__construct(sourceFrames,__o_widthInc,__o_heightInc,filters);
	return __this;
}

FlxFilterFrames_obj::FlxFilterFrames_obj()
{
}

void FlxFilterFrames_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxFilterFrames);
	HX_MARK_MEMBER_NAME(sourceFrames,"sourceFrames");
	HX_MARK_MEMBER_NAME(widthInc,"widthInc");
	HX_MARK_MEMBER_NAME(heightInc,"heightInc");
	HX_MARK_MEMBER_NAME(filters,"filters");
	 ::flixel::graphics::frames::FlxFramesCollection_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxFilterFrames_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sourceFrames,"sourceFrames");
	HX_VISIT_MEMBER_NAME(widthInc,"widthInc");
	HX_VISIT_MEMBER_NAME(heightInc,"heightInc");
	HX_VISIT_MEMBER_NAME(filters,"filters");
	 ::flixel::graphics::frames::FlxFramesCollection_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxFilterFrames_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { return hx::Val( filters ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"widthInc") ) { return hx::Val( widthInc ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"heightInc") ) { return hx::Val( heightInc ); }
		if (HX_FIELD_EQ(inName,"genFrames") ) { return hx::Val( genFrames_dyn() ); }
		if (HX_FIELD_EQ(inName,"addFilter") ) { return hx::Val( addFilter_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"applyFilter") ) { return hx::Val( applyFilter_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_filters") ) { return hx::Val( set_filters_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sourceFrames") ) { return hx::Val( sourceFrames ); }
		if (HX_FIELD_EQ(inName,"removeFilter") ) { return hx::Val( removeFilter_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearFilters") ) { return hx::Val( clearFilters_dyn() ); }
		if (HX_FIELD_EQ(inName,"regenBitmaps") ) { return hx::Val( regenBitmaps_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyFilters") ) { return hx::Val( applyFilters_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"applyToSprite") ) { return hx::Val( applyToSprite_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"regenAndApplyFilters") ) { return hx::Val( regenAndApplyFilters_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxFilterFrames_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { outValue = ( rect ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { outValue = ( point ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromFrames") ) { outValue = fromFrames_dyn(); return true; }
	}
	return false;
}

hx::Val FlxFilterFrames_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_filters(inValue.Cast< ::Array< ::Dynamic> >()) );filters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"widthInc") ) { widthInc=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"heightInc") ) { heightInc=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sourceFrames") ) { sourceFrames=inValue.Cast<  ::flixel::graphics::frames::FlxFramesCollection >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxFilterFrames_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=ioValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { point=ioValue.Cast<  ::openfl::_legacy::geom::Point >(); return true; }
	}
	return false;
}

void FlxFilterFrames_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("sourceFrames","\xe1","\x6a","\x8c","\xa2"));
	outFields->push(HX_HCSTRING("widthInc","\x78","\x16","\xe2","\xaf"));
	outFields->push(HX_HCSTRING("heightInc","\x37","\x67","\x9a","\xae"));
	outFields->push(HX_HCSTRING("filters","\xbb","\xa1","\x46","\x09"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxFilterFrames_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::graphics::frames::FlxFramesCollection*/ ,(int)offsetof(FlxFilterFrames_obj,sourceFrames),HX_HCSTRING("sourceFrames","\xe1","\x6a","\x8c","\xa2")},
	{hx::fsInt,(int)offsetof(FlxFilterFrames_obj,widthInc),HX_HCSTRING("widthInc","\x78","\x16","\xe2","\xaf")},
	{hx::fsInt,(int)offsetof(FlxFilterFrames_obj,heightInc),HX_HCSTRING("heightInc","\x37","\x67","\x9a","\xae")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxFilterFrames_obj,filters),HX_HCSTRING("filters","\xbb","\xa1","\x46","\x09")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxFilterFrames_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::_legacy::geom::Point*/ ,(void *) &FlxFilterFrames_obj::point,HX_HCSTRING("point","\x50","\xb4","\x8f","\xc6")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(void *) &FlxFilterFrames_obj::rect,HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxFilterFrames_obj_sMemberFields[] = {
	HX_HCSTRING("sourceFrames","\xe1","\x6a","\x8c","\xa2"),
	HX_HCSTRING("widthInc","\x78","\x16","\xe2","\xaf"),
	HX_HCSTRING("heightInc","\x37","\x67","\x9a","\xae"),
	HX_HCSTRING("filters","\xbb","\xa1","\x46","\x09"),
	HX_HCSTRING("applyToSprite","\x6e","\xe3","\x09","\x2b"),
	HX_HCSTRING("genFrames","\x56","\x70","\x5b","\x2f"),
	HX_HCSTRING("addFilter","\xb9","\x54","\x59","\x3d"),
	HX_HCSTRING("removeFilter","\x1c","\xbb","\x62","\xf4"),
	HX_HCSTRING("clearFilters","\xae","\x53","\xc5","\xe4"),
	HX_HCSTRING("regenAndApplyFilters","\x27","\x91","\x67","\x08"),
	HX_HCSTRING("regenBitmaps","\x67","\xdc","\xb3","\x10"),
	HX_HCSTRING("applyFilter","\xc6","\xdf","\x2f","\xc1"),
	HX_HCSTRING("applyFilters","\xed","\xed","\xb3","\x48"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("set_filters","\xde","\x08","\xae","\x99"),
	::String(null()) };

static void FlxFilterFrames_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxFilterFrames_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxFilterFrames_obj::point,"point");
	HX_MARK_MEMBER_NAME(FlxFilterFrames_obj::rect,"rect");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxFilterFrames_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxFilterFrames_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxFilterFrames_obj::point,"point");
	HX_VISIT_MEMBER_NAME(FlxFilterFrames_obj::rect,"rect");
};

#endif

hx::Class FlxFilterFrames_obj::__mClass;

static ::String FlxFilterFrames_obj_sStaticFields[] = {
	HX_HCSTRING("point","\x50","\xb4","\x8f","\xc6"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("fromFrames","\xb0","\xb4","\xc9","\xef"),
	::String(null())
};

void FlxFilterFrames_obj::__register()
{
	hx::Object *dummy = new FlxFilterFrames_obj;
	FlxFilterFrames_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.graphics.frames.FlxFilterFrames","\x59","\x45","\x3c","\x01");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxFilterFrames_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxFilterFrames_obj::__SetStatic;
	__mClass->mMarkFunc = FlxFilterFrames_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxFilterFrames_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxFilterFrames_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxFilterFrames_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxFilterFrames_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxFilterFrames_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxFilterFrames_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxFilterFrames_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_741532f23a714680_19_boot)
HXDLIN(  19)		point =  ::openfl::_legacy::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_741532f23a714680_20_boot)
HXDLIN(  20)		rect =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace flixel
} // end namespace graphics
} // end namespace frames
