// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Ball
#include <Ball.h>
#endif
#ifndef INCLUDED_Glow
#include <Glow.h>
#endif
#ifndef INCLUDED_Level
#include <Level.h>
#endif
#ifndef INCLUDED_Obstacle
#include <Obstacle.h>
#endif
#ifndef INCLUDED_Paddle
#include <Paddle.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrail
#include <flixel/addons/effects/FlxTrail.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_95d2796a0ae13f36_24_new,"Ball","new",0xfd30aa91,"Ball.new","Ball.hx",24,0xf7f391ff)
HX_LOCAL_STACK_FRAME(_hx_pos_95d2796a0ae13f36_49_resetPosition,"Ball","resetPosition",0x355d6f09,"Ball.resetPosition","Ball.hx",49,0xf7f391ff)
HX_LOCAL_STACK_FRAME(_hx_pos_95d2796a0ae13f36_63_resetPosition,"Ball","resetPosition",0x355d6f09,"Ball.resetPosition","Ball.hx",63,0xf7f391ff)
HX_LOCAL_STACK_FRAME(_hx_pos_95d2796a0ae13f36_67_start,"Ball","start",0x1577fcd3,"Ball.start","Ball.hx",67,0xf7f391ff)
HX_LOCAL_STACK_FRAME(_hx_pos_95d2796a0ae13f36_72_update,"Ball","update",0x34906078,"Ball.update","Ball.hx",72,0xf7f391ff)
HX_LOCAL_STACK_FRAME(_hx_pos_95d2796a0ae13f36_16_boot,"Ball","boot",0x857d94e1,"Ball.boot","Ball.hx",16,0xf7f391ff)
HX_LOCAL_STACK_FRAME(_hx_pos_95d2796a0ae13f36_17_boot,"Ball","boot",0x857d94e1,"Ball.boot","Ball.hx",17,0xf7f391ff)

void Ball_obj::__construct(int P){
            	HX_GC_STACKFRAME(&_hx_pos_95d2796a0ae13f36_24_new)
HXLINE(  25)		super::__construct(null(),null(),null());
HXLINE(  26)		this->player = P;
HXLINE(  27)		this->makeGraphic(::Ball_obj::ballSize,::Ball_obj::ballSize,(int)-1,null(),null());
HXLINE(  28)		this->set_immovable(true);
HXLINE(  29)		int _hx_tmp;
HXDLIN(  29)		if ((this->player == (int)0)) {
HXLINE(  29)			_hx_tmp = (int)-137;
            		}
            		else {
HXLINE(  29)			_hx_tmp = (int)-34817;
            		}
HXDLIN(  29)		this->set_color(_hx_tmp);
HXLINE(  31)		 ::flixel::FlxSprite p =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,HX_("assets/images/pattern2.png",48,e2,53,e7));
HXLINE(  32)		Float _hx_tmp1 = -(::Math_obj::random());
HXDLIN(  32)		Float _hx_tmp2 = p->get_width();
HXDLIN(  32)		int _hx_tmp3 = (_hx_tmp1 * (_hx_tmp2 - this->get_width()));
HXDLIN(  32)		Float _hx_tmp4 = -(::Math_obj::random());
HXDLIN(  32)		Float _hx_tmp5 = p->get_height();
HXDLIN(  32)		this->stamp(p,_hx_tmp3,(_hx_tmp4 * (_hx_tmp5 - this->get_height())));
HXLINE(  34)		this->resetPosition(true);
HXLINE(  36)		this->ping =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXLINE(  37)		if ((this->player == (int)0)) {
HXLINE(  38)			this->ping->loadEmbedded(HX_("assets/sounds/ping2.ogg",62,a0,c8,2a),null(),null(),null());
            		}
            		else {
HXLINE(  40)			this->ping->loadEmbedded(HX_("assets/sounds/ping.ogg",72,29,65,50),null(),null(),null());
            		}
HXLINE(  41)		this->ping->set_volume(((Float)0.2));
HXLINE(  43)		::Glow_obj::onlyGlow(hx::ObjectPtr<OBJ_>(this));
HXLINE(  45)		 ::flixel::FlxState _hx_tmp6 = ::flixel::FlxG_obj::game->_state;
HXDLIN(  45)		_hx_tmp6->add((this->trail =  ::flixel::addons::effects::FlxTrail_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),null(),null(),null(),null(),null()))).StaticCast<  ::flixel::FlxBasic >();
            	}

Dynamic Ball_obj::__CreateEmpty() { return new Ball_obj; }

void *Ball_obj::_hx_vtable = 0;

Dynamic Ball_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Ball_obj > _hx_result = new Ball_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Ball_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2bea0e1f || inClassId==(int)0x2e105115;
	}
}

void Ball_obj::resetPosition(hx::Null< bool >  __o_andGo){
bool andGo = __o_andGo.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_95d2796a0ae13f36_49_resetPosition)
HXDLIN(  49)		 ::Ball _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  50)		Float _hx_tmp;
HXDLIN(  50)		if ((this->player == (int)0)) {
HXLINE(  50)			_hx_tmp = (int)100;
            		}
            		else {
HXLINE(  50)			_hx_tmp = (::flixel::FlxG_obj::height - (int)120);
            		}
HXDLIN(  50)		this->set_y(_hx_tmp);
HXLINE(  51)		this->set_x(((Float)(::flixel::FlxG_obj::width - ::Ball_obj::ballSize) / (Float)(int)2));
HXLINE(  53)		 ::flixel::math::FlxPoint _hx_tmp1 = this->velocity;
HXDLIN(  53)		_hx_tmp1->set_x(this->velocity->set_y((int)0));
HXLINE(  54)		this->set_solid(false);
HXLINE(  56)		bool _hx_tmp2;
HXDLIN(  56)		if (hx::IsNotNull( ::Level_obj::Paddles )) {
HXLINE(  56)			_hx_tmp2 = (::Level_obj::Paddles->length > this->player);
            		}
            		else {
HXLINE(  56)			_hx_tmp2 = false;
            		}
HXDLIN(  56)		if (_hx_tmp2) {
HXLINE(  58)			::Level_obj::Paddles->__get(this->player).StaticCast<  ::Paddle >()->resetPosition();
            		}
HXLINE(  60)		if (andGo) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Ball,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer t){
            				HX_GC_STACKFRAME(&_hx_pos_95d2796a0ae13f36_63_resetPosition)
HXLINE(  63)				_gthis->start();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  61)			this->set_alpha((int)0);
HXLINE(  62)			::flixel::tweens::FlxTween_obj::tween(hx::ObjectPtr<OBJ_>(this), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),(int)1)),(int)2,null());
HXLINE(  63)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start((int)2, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Ball_obj,resetPosition,(void))

void Ball_obj::start(){
            	HX_STACKFRAME(&_hx_pos_95d2796a0ae13f36_67_start)
HXLINE(  68)		 ::flixel::math::FlxPoint _hx_tmp = this->velocity;
HXDLIN(  68)		Float _hx_tmp1 = (::Ball_obj::Speed * (int)2);
HXDLIN(  68)		_hx_tmp->set_y((_hx_tmp1 * (this->player - ((Float)0.5))));
HXLINE(  69)		this->set_solid(true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Ball_obj,start,(void))

void Ball_obj::update(Float d){
            	HX_STACKFRAME(&_hx_pos_95d2796a0ae13f36_72_update)
HXLINE(  73)		this->super::update(d);
HXLINE(  75)		{
HXLINE(  75)			int _g1 = (int)0;
HXDLIN(  75)			int _g = this->trail->group->members->get_length();
HXDLIN(  75)			while((_g1 < _g)){
HXLINE(  75)				_g1 = (_g1 + (int)1);
HXDLIN(  75)				int t = (_g1 - (int)1);
HXLINE(  76)				 ::flixel::math::FlxPoint _hx_tmp = Dynamic( this->trail->group->members->__get(t)).StaticCast<  ::flixel::FlxSprite >()->scale;
HXDLIN(  76)				_hx_tmp->set(((int)1 - ((Float)t / (Float)(int)10)),((int)1 - ((Float)t / (Float)(int)10)));
            			}
            		}
HXLINE(  78)		Float _hx_tmp1 = this->y;
HXDLIN(  78)		if ((_hx_tmp1 < -(this->get_height()))) {
HXLINE(  79)			if ((this->player == (int)0)) {
HXLINE(  80)				this->resetPosition(true);
            			}
            		}
HXLINE(  87)		if ((this->y > ::flixel::FlxG_obj::height)) {
HXLINE(  88)			if ((this->player == (int)1)) {
HXLINE(  89)				this->resetPosition(true);
            			}
            		}
HXLINE(  96)		bool _hx_tmp2;
HXDLIN(  96)		Float _hx_tmp3 = this->x;
HXDLIN(  96)		if (!((_hx_tmp3 < -(this->get_width())))) {
HXLINE(  96)			_hx_tmp2 = (this->x > ::flixel::FlxG_obj::width);
            		}
            		else {
HXLINE(  96)			_hx_tmp2 = true;
            		}
HXDLIN(  96)		if (_hx_tmp2) {
HXLINE(  97)			this->resetPosition(true);
            		}
HXLINE( 100)		if (::flixel::FlxG_obj::overlap(hx::ObjectPtr<OBJ_>(this),::Level_obj::Blocks,null(),null())) {
HXLINE( 101)			int dir;
HXLINE( 103)			{
HXLINE( 103)				int _g2 = (int)0;
HXDLIN( 103)				::Array< ::Dynamic> _g11 = ::Level_obj::Blocks->members;
HXDLIN( 103)				while((_g2 < _g11->length)){
HXLINE( 103)					 ::Obstacle b = _g11->__get(_g2).StaticCast<  ::Obstacle >();
HXDLIN( 103)					_g2 = (_g2 + (int)1);
HXLINE( 104)					if (::flixel::FlxG_obj::overlap(hx::ObjectPtr<OBJ_>(this),b,null(),null())) {
HXLINE( 105)						Float left = (b->x - this->x);
HXDLIN( 105)						Float left1 = (this->x - b->x);
HXDLIN( 105)						Float left2 = ::Math_obj::max(left,(left1 - b->get_width()));
HXLINE( 106)						Float top = (b->y - this->y);
HXDLIN( 106)						Float top1 = (this->y - b->y);
HXDLIN( 106)						Float top2 = ::Math_obj::max(top,(top1 - b->get_height()));
HXLINE( 107)						if ((left2 < top2)) {
HXLINE( 108)							if ((this->y < b->y)) {
HXLINE( 109)								 ::flixel::math::FlxPoint _hx_tmp4 = this->velocity;
HXDLIN( 109)								_hx_tmp4->set_y(((int)-1 * ::Math_obj::abs(this->velocity->y)));
HXLINE( 110)								dir = (int)256;
            							}
            							else {
HXLINE( 113)								 ::flixel::math::FlxPoint _hx_tmp5 = this->velocity;
HXDLIN( 113)								_hx_tmp5->set_y(::Math_obj::abs(this->velocity->y));
HXLINE( 114)								dir = (int)4096;
            							}
            						}
            						else {
HXLINE( 118)							if ((this->x < b->x)) {
HXLINE( 119)								 ::flixel::math::FlxPoint _hx_tmp6 = this->velocity;
HXDLIN( 119)								_hx_tmp6->set_x(((int)-1 * ::Math_obj::abs(this->velocity->x)));
HXLINE( 120)								dir = (int)1;
            							}
            							else {
HXLINE( 123)								 ::flixel::math::FlxPoint _hx_tmp7 = this->velocity;
HXDLIN( 123)								_hx_tmp7->set_x(::Math_obj::abs(this->velocity->x));
HXLINE( 124)								dir = (int)16;
            							}
            						}
HXLINE( 128)						if (hx::IsNotNull( b->onHit )) {
HXLINE( 129)							b->onHit(dir);
            						}
HXLINE( 131)						::flixel::FlxG_obj::overlap(hx::ObjectPtr<OBJ_>(this),b,null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 132)						this->ping->play(true,null(),null());
            					}
            				}
            			}
            		}
            	}


int Ball_obj::ballSize;

Float Ball_obj::Speed;


hx::ObjectPtr< Ball_obj > Ball_obj::__new(int P) {
	hx::ObjectPtr< Ball_obj > __this = new Ball_obj();
	__this->__construct(P);
	return __this;
}

hx::ObjectPtr< Ball_obj > Ball_obj::__alloc(hx::Ctx *_hx_ctx,int P) {
	Ball_obj *__this = (Ball_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Ball_obj), true, "Ball"));
	*(void **)__this = Ball_obj::_hx_vtable;
	__this->__construct(P);
	return __this;
}

Ball_obj::Ball_obj()
{
}

void Ball_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Ball);
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(ping,"ping");
	HX_MARK_MEMBER_NAME(trail,"trail");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Ball_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(ping,"ping");
	HX_VISIT_MEMBER_NAME(trail,"trail");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Ball_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ping") ) { return hx::Val( ping ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"trail") ) { return hx::Val( trail ); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"resetPosition") ) { return hx::Val( resetPosition_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Ball_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"Speed") ) { outValue = ( Speed ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ballSize") ) { outValue = ( ballSize ); return true; }
	}
	return false;
}

hx::Val Ball_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ping") ) { ping=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"trail") ) { trail=inValue.Cast<  ::flixel::addons::effects::FlxTrail >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Ball_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"Speed") ) { Speed=ioValue.Cast< Float >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ballSize") ) { ballSize=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Ball_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"));
	outFields->push(HX_HCSTRING("ping","\x72","\xf2","\x57","\x4a"));
	outFields->push(HX_HCSTRING("trail","\xc6","\x93","\x1f","\x16"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Ball_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Ball_obj,player),HX_HCSTRING("player","\x61","\xeb","\xb8","\x37")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(Ball_obj,ping),HX_HCSTRING("ping","\x72","\xf2","\x57","\x4a")},
	{hx::fsObject /*::flixel::addons::effects::FlxTrail*/ ,(int)offsetof(Ball_obj,trail),HX_HCSTRING("trail","\xc6","\x93","\x1f","\x16")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Ball_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Ball_obj::ballSize,HX_HCSTRING("ballSize","\x60","\x1a","\xf0","\x3b")},
	{hx::fsFloat,(void *) &Ball_obj::Speed,HX_HCSTRING("Speed","\x67","\x07","\x97","\x14")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Ball_obj_sMemberFields[] = {
	HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"),
	HX_HCSTRING("ping","\x72","\xf2","\x57","\x4a"),
	HX_HCSTRING("trail","\xc6","\x93","\x1f","\x16"),
	HX_HCSTRING("resetPosition","\x98","\x8d","\x99","\xfb"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Ball_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Ball_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Ball_obj::ballSize,"ballSize");
	HX_MARK_MEMBER_NAME(Ball_obj::Speed,"Speed");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Ball_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Ball_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Ball_obj::ballSize,"ballSize");
	HX_VISIT_MEMBER_NAME(Ball_obj::Speed,"Speed");
};

#endif

hx::Class Ball_obj::__mClass;

static ::String Ball_obj_sStaticFields[] = {
	HX_HCSTRING("ballSize","\x60","\x1a","\xf0","\x3b"),
	HX_HCSTRING("Speed","\x67","\x07","\x97","\x14"),
	::String(null())
};

void Ball_obj::__register()
{
	hx::Object *dummy = new Ball_obj;
	Ball_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Ball","\x1f","\x0e","\xea","\x2b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Ball_obj::__GetStatic;
	__mClass->mSetStaticField = &Ball_obj::__SetStatic;
	__mClass->mMarkFunc = Ball_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Ball_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Ball_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Ball_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Ball_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ball_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ball_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Ball_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_95d2796a0ae13f36_16_boot)
HXDLIN(  16)		ballSize = (int)20;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95d2796a0ae13f36_17_boot)
HXDLIN(  17)		Speed = ((Float)300);
            	}
}

