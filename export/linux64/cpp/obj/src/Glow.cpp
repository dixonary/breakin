// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Glow
#include <Glow.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFilterFrames
#include <flixel/graphics/frames/FlxFilterFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_filters_BitmapFilter
#include <openfl/_legacy/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl__legacy_filters_BlurFilter
#include <openfl/_legacy/filters/BlurFilter.h>
#endif
#ifndef INCLUDED_openfl__legacy_filters_GlowFilter
#include <openfl/_legacy/filters/GlowFilter.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_d8480883c2b0bb35_9_makeGlow,"Glow","makeGlow",0x7a99697c,"Glow.makeGlow","Glow.hx",9,0xef44f231)
HX_LOCAL_STACK_FRAME(_hx_pos_d8480883c2b0bb35_20_onlyGlow,"Glow","onlyGlow",0xf3f44bfa,"Glow.onlyGlow","Glow.hx",20,0xef44f231)

void Glow_obj::__construct() { }

Dynamic Glow_obj::__CreateEmpty() { return new Glow_obj; }

void *Glow_obj::_hx_vtable = 0;

Dynamic Glow_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Glow_obj > _hx_result = new Glow_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Glow_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2f407aad;
}

void Glow_obj::makeGlow( ::flixel::FlxSprite sprite){
            	HX_GC_STACKFRAME(&_hx_pos_d8480883c2b0bb35_9_makeGlow)
HXLINE(  11)		 ::openfl::_legacy::filters::BlurFilter blurFilter =  ::openfl::_legacy::filters::BlurFilter_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  12)		blurFilter->blurX = (int)5;
HXLINE(  13)		blurFilter->blurY = (int)5;
HXLINE(  14)		 ::openfl::_legacy::filters::GlowFilter glowFilter =  ::openfl::_legacy::filters::GlowFilter_obj::__alloc( HX_CTX ,(int)872415231,(int)1,(int)10,(int)10,(int)2,(int)1,null(),null());
HXLINE(  16)		 ::flixel::graphics::frames::FlxFilterFrames frame =  ::flixel::graphics::frames::FlxFilterFrames_obj::__alloc( HX_CTX ,sprite->frames,(int)40,(int)40,::Array_obj< ::Dynamic>::__new(2)->init(0,blurFilter)->init(1,glowFilter));
HXLINE(  18)		frame->applyToSprite(sprite,false,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Glow_obj,makeGlow,(void))

void Glow_obj::onlyGlow( ::flixel::FlxSprite sprite){
            	HX_GC_STACKFRAME(&_hx_pos_d8480883c2b0bb35_20_onlyGlow)
HXLINE(  22)		 ::openfl::_legacy::filters::GlowFilter glowFilter =  ::openfl::_legacy::filters::GlowFilter_obj::__alloc( HX_CTX ,(int)872415231,(int)1,(int)10,(int)10,(int)2,(int)1,null(),null());
HXLINE(  24)		 ::flixel::graphics::frames::FlxFilterFrames frame =  ::flixel::graphics::frames::FlxFilterFrames_obj::__alloc( HX_CTX ,sprite->frames,(int)40,(int)40,::Array_obj< ::Dynamic>::__new(1)->init(0,glowFilter));
HXLINE(  26)		frame->applyToSprite(sprite,false,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Glow_obj,onlyGlow,(void))


Glow_obj::Glow_obj()
{
}

bool Glow_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"makeGlow") ) { outValue = makeGlow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onlyGlow") ) { outValue = onlyGlow_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Glow_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Glow_obj_sStaticStorageInfo = 0;
#endif

static void Glow_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Glow_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Glow_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Glow_obj::__mClass,"__mClass");
};

#endif

hx::Class Glow_obj::__mClass;

static ::String Glow_obj_sStaticFields[] = {
	HX_HCSTRING("makeGlow","\x9b","\x43","\x05","\x3b"),
	HX_HCSTRING("onlyGlow","\x19","\x26","\x60","\xb4"),
	::String(null())
};

void Glow_obj::__register()
{
	hx::Object *dummy = new Glow_obj;
	Glow_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Glow","\xad","\x7a","\x40","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Glow_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Glow_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Glow_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Glow_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Glow_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Glow_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Glow_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

