// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Ball
#include <Ball.h>
#endif
#ifndef INCLUDED_Obstacle
#include <Obstacle.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d0cdcf85d2e06b1a_39_new,"Obstacle","new",0xcbb8aae1,"Obstacle.new","Obstacle.hx",39,0xd7960baf)
HX_DEFINE_STACK_FRAME(_hx_pos_d0cdcf85d2e06b1a_37_new,"Obstacle","new",0xcbb8aae1,"Obstacle.new","Obstacle.hx",37,0xd7960baf)
HX_DEFINE_STACK_FRAME(_hx_pos_d0cdcf85d2e06b1a_35_new,"Obstacle","new",0xcbb8aae1,"Obstacle.new","Obstacle.hx",35,0xd7960baf)
HX_DEFINE_STACK_FRAME(_hx_pos_d0cdcf85d2e06b1a_55_new,"Obstacle","new",0xcbb8aae1,"Obstacle.new","Obstacle.hx",55,0xd7960baf)
HX_DEFINE_STACK_FRAME(_hx_pos_d0cdcf85d2e06b1a_17_new,"Obstacle","new",0xcbb8aae1,"Obstacle.new","Obstacle.hx",17,0xd7960baf)
HX_LOCAL_STACK_FRAME(_hx_pos_d0cdcf85d2e06b1a_61_destroy,"Obstacle","destroy",0x1310dbfb,"Obstacle.destroy","Obstacle.hx",61,0xd7960baf)
HX_LOCAL_STACK_FRAME(_hx_pos_d0cdcf85d2e06b1a_74_die,"Obstacle","die",0xcbb117c1,"Obstacle.die","Obstacle.hx",74,0xd7960baf)
HX_LOCAL_STACK_FRAME(_hx_pos_d0cdcf85d2e06b1a_73_die,"Obstacle","die",0xcbb117c1,"Obstacle.die","Obstacle.hx",73,0xd7960baf)
HX_LOCAL_STACK_FRAME(_hx_pos_d0cdcf85d2e06b1a_64_die,"Obstacle","die",0xcbb117c1,"Obstacle.die","Obstacle.hx",64,0xd7960baf)
HX_LOCAL_STACK_FRAME(_hx_pos_d0cdcf85d2e06b1a_82_update,"Obstacle","update",0x5fe97228,"Obstacle.update","Obstacle.hx",82,0xd7960baf)
HX_LOCAL_STACK_FRAME(_hx_pos_d0cdcf85d2e06b1a_85_set_offsetY,"Obstacle","set_offsetY",0x1641340a,"Obstacle.set_offsetY","Obstacle.hx",85,0xd7960baf)

void Obstacle_obj::__construct(Float X,Float Y,int W,int H,int C,hx::Null< bool >  __o_P,hx::Null< Float >  __o_D){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2,int,C, ::Obstacle,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer t){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,int,C, ::Obstacle,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween t1){
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Obstacle,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween t2){
            					HX_GC_STACKFRAME(&_hx_pos_d0cdcf85d2e06b1a_39_new)
HXLINE(  39)					_gthis->set_solid(true);
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_d0cdcf85d2e06b1a_37_new)
HXLINE(  38)				::flixel::tweens::FlxTween_obj::tween(_gthis->scale, ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("y",79,00,00,00),(int)1)),((Float)0.2), ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineIn_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
HXLINE(  42)				::flixel::tweens::FlxTween_obj::color(_gthis,((Float)0.2),(int)-1,C,null());
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_d0cdcf85d2e06b1a_35_new)
HXLINE(  36)			_gthis->set_alpha((int)1);
HXLINE(  37)			::flixel::tweens::FlxTween_obj::tween(_gthis->scale, ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),(int)1)),((Float)0.2), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineIn_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(C,_gthis)))));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::Obstacle,_gthis) HXARGC(1)
            		void _hx_run(int dir){
            			HX_GC_STACKFRAME(&_hx_pos_d0cdcf85d2e06b1a_55_new)
HXLINE(  55)			_gthis->die();
            		}
            		HX_END_LOCAL_FUNC1((void))

bool P = __o_P.Default(false);
Float D = __o_D.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_d0cdcf85d2e06b1a_17_new)
HXDLIN(  17)		 ::Obstacle _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  18)		super::__construct(null(),null(),null());
HXLINE(  19)		this->makeGraphic(W,H,(int)0,true,null());
HXLINE(  21)		 ::flixel::FlxSprite s =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  22)		s->makeGraphic((W - (int)6),(H - (int)6),(int)-1,true,null());
HXLINE(  24)		this->set_color((int)-1);
HXLINE(  26)		if (P) {
HXLINE(  27)			 ::flixel::FlxSprite p =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,HX_("assets/images/pattern.png",c0,ed,97,df));
HXLINE(  28)			Float _hx_tmp = -(::Math_obj::random());
HXDLIN(  28)			Float _hx_tmp1 = p->get_width();
HXDLIN(  28)			int _hx_tmp2 = (_hx_tmp * (_hx_tmp1 - s->get_width()));
HXDLIN(  28)			Float _hx_tmp3 = -(::Math_obj::random());
HXDLIN(  28)			Float _hx_tmp4 = p->get_height();
HXDLIN(  28)			s->stamp(p,_hx_tmp2,(_hx_tmp3 * (_hx_tmp4 - s->get_height())));
            		}
HXLINE(  30)		this->stamp(s,(int)3,(int)3);
HXLINE(  32)		this->scale->set(((Float)0.1),((Float)0.1));
HXLINE(  34)		this->set_alpha((int)0);
HXLINE(  35)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(D, ::Dynamic(new _hx_Closure_2(C,_gthis)),null());
HXLINE(  47)		this->set_x(X);
HXLINE(  48)		this->set_y(Y);
HXLINE(  50)		this->set_immovable(true);
HXLINE(  51)		this->set_solid(false);
HXLINE(  52)		this->elasticity = (int)1;
HXLINE(  54)		this->onHit =  ::Dynamic(new _hx_Closure_3(_gthis));
            	}

Dynamic Obstacle_obj::__CreateEmpty() { return new Obstacle_obj; }

void *Obstacle_obj::_hx_vtable = 0;

Dynamic Obstacle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Obstacle_obj > _hx_result = new Obstacle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool Obstacle_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x6451af37;
	}
}

void Obstacle_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_d0cdcf85d2e06b1a_61_destroy)
HXDLIN(  61)		this->super::destroy();
            	}


void Obstacle_obj::die(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Obstacle,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween t){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Obstacle,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween t1){
            				HX_STACKFRAME(&_hx_pos_d0cdcf85d2e06b1a_74_die)
HXLINE(  74)				_gthis->destroy();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_d0cdcf85d2e06b1a_73_die)
HXLINE(  73)			::flixel::tweens::FlxTween_obj::tween(_gthis->scale, ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),(int)0)),((Float)0.1), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineOut_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_d0cdcf85d2e06b1a_64_die)
HXDLIN(  64)		 ::Obstacle _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  65)		this->set_solid(false);
HXLINE(  67)		::flixel::tweens::FlxTween_obj::color(hx::ObjectPtr<OBJ_>(this),((Float)0.2),this->color,(int)-1,null());
HXLINE(  68)		if (hx::IsNull( this->scale )) {
HXLINE(  69)			this->destroy();
HXLINE(  70)			return;
            		}
HXLINE(  72)		::flixel::tweens::FlxTween_obj::tween(this->scale, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),((Float)0.1))),((Float)0.2), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineOut_dyn())
            			->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis)))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Obstacle_obj,die,(void))

void Obstacle_obj::update(Float d){
            	HX_STACKFRAME(&_hx_pos_d0cdcf85d2e06b1a_82_update)
HXDLIN(  82)		this->super::update(d);
            	}


Float Obstacle_obj::set_offsetY(Float Y){
            	HX_STACKFRAME(&_hx_pos_d0cdcf85d2e06b1a_85_set_offsetY)
HXLINE(  86)		{
HXLINE(  86)			 ::Obstacle _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  86)			_g->set_y((_g->y - this->offsetY));
            		}
HXLINE(  87)		this->offsetY = Y;
HXLINE(  88)		{
HXLINE(  88)			 ::Obstacle _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  88)			_g1->set_y((_g1->y + this->offsetY));
            		}
HXLINE(  89)		return Y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Obstacle_obj,set_offsetY,return )

::Array< ::Dynamic> Obstacle_obj::balls;


hx::ObjectPtr< Obstacle_obj > Obstacle_obj::__new(Float X,Float Y,int W,int H,int C,hx::Null< bool >  __o_P,hx::Null< Float >  __o_D) {
	hx::ObjectPtr< Obstacle_obj > __this = new Obstacle_obj();
	__this->__construct(X,Y,W,H,C,__o_P,__o_D);
	return __this;
}

hx::ObjectPtr< Obstacle_obj > Obstacle_obj::__alloc(hx::Ctx *_hx_ctx,Float X,Float Y,int W,int H,int C,hx::Null< bool >  __o_P,hx::Null< Float >  __o_D) {
	Obstacle_obj *__this = (Obstacle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Obstacle_obj), true, "Obstacle"));
	*(void **)__this = Obstacle_obj::_hx_vtable;
	__this->__construct(X,Y,W,H,C,__o_P,__o_D);
	return __this;
}

Obstacle_obj::Obstacle_obj()
{
}

void Obstacle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Obstacle);
	HX_MARK_MEMBER_NAME(onHit,"onHit");
	HX_MARK_MEMBER_NAME(offsetY,"offsetY");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Obstacle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(onHit,"onHit");
	HX_VISIT_MEMBER_NAME(offsetY,"offsetY");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Obstacle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"die") ) { return hx::Val( die_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"onHit") ) { return hx::Val( onHit ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsetY") ) { return hx::Val( offsetY ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_offsetY") ) { return hx::Val( set_offsetY_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Obstacle_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"balls") ) { outValue = ( balls ); return true; }
	}
	return false;
}

hx::Val Obstacle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"onHit") ) { onHit=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsetY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_offsetY(inValue.Cast< Float >()) );offsetY=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Obstacle_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"balls") ) { balls=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void Obstacle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Obstacle_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Obstacle_obj,onHit),HX_HCSTRING("onHit","\x74","\xda","\x66","\x32")},
	{hx::fsFloat,(int)offsetof(Obstacle_obj,offsetY),HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Obstacle_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Obstacle_obj::balls,HX_HCSTRING("balls","\x94","\xdd","\xb4","\xad")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Obstacle_obj_sMemberFields[] = {
	HX_HCSTRING("onHit","\x74","\xda","\x66","\x32"),
	HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("die","\x40","\x3d","\x4c","\x00"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("set_offsetY","\x89","\x70","\xcc","\x67"),
	::String(null()) };

static void Obstacle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Obstacle_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Obstacle_obj::balls,"balls");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Obstacle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Obstacle_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Obstacle_obj::balls,"balls");
};

#endif

hx::Class Obstacle_obj::__mClass;

static ::String Obstacle_obj_sStaticFields[] = {
	HX_HCSTRING("balls","\x94","\xdd","\xb4","\xad"),
	::String(null())
};

void Obstacle_obj::__register()
{
	hx::Object *dummy = new Obstacle_obj;
	Obstacle_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Obstacle","\x6f","\xa6","\xb7","\x97");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Obstacle_obj::__GetStatic;
	__mClass->mSetStaticField = &Obstacle_obj::__SetStatic;
	__mClass->mMarkFunc = Obstacle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Obstacle_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Obstacle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Obstacle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Obstacle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Obstacle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Obstacle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

