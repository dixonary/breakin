// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EdgeGlow
#include <EdgeGlow.h>
#endif
#ifndef INCLUDED_Level
#include <Level.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4ae29f91e0e52855_9_new,"EdgeGlow","new",0x13c28f7c,"EdgeGlow.new","EdgeGlow.hx",9,0x3856f374)
HX_LOCAL_STACK_FRAME(_hx_pos_4ae29f91e0e52855_41_update,"EdgeGlow","update",0x1e9a206d,"EdgeGlow.update","EdgeGlow.hx",41,0x3856f374)

void EdgeGlow_obj::__construct(int P){
            	HX_GC_STACKFRAME(&_hx_pos_4ae29f91e0e52855_9_new)
HXLINE(  13)		this->up = true;
HXLINE(  12)		this->maxAlpha = ((Float)0);
HXLINE(  17)		super::__construct(null(),null(),null());
HXLINE(  18)		this->player = P;
HXLINE(  20)		this->loadGraphic(HX_("assets/images/redGradient.png",d1,8a,92,4e),null(),null(),null(),null(),null());
HXLINE(  21)		if ((this->player == (int)1)) {
HXLINE(  22)			this->scale->set(::flixel::FlxG_obj::width,((Float)0.4));
HXLINE(  23)			this->updateHitbox();
            		}
            		else {
HXLINE(  26)			this->scale->set(::flixel::FlxG_obj::width,((Float)0.4));
HXLINE(  27)			this->set_angle((int)180);
HXLINE(  28)			this->updateHitbox();
HXLINE(  29)			int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  29)			this->set_y((_hx_tmp - this->get_height()));
            		}
HXLINE(  32)		this->set_alpha((int)0);
HXLINE(  34)		this->warning =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXLINE(  35)		this->warning->loadEmbedded(HX_("assets/sounds/warning.ogg",7e,29,7b,0b),true,null(),null());
HXLINE(  36)		this->warning->set_volume((int)0);
HXLINE(  37)		this->warning->play(null(),null(),null());
            	}

Dynamic EdgeGlow_obj::__CreateEmpty() { return new EdgeGlow_obj; }

void *EdgeGlow_obj::_hx_vtable = 0;

Dynamic EdgeGlow_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EdgeGlow_obj > _hx_result = new EdgeGlow_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool EdgeGlow_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x2e76618a;
	}
}

void EdgeGlow_obj::update(Float d){
            	HX_STACKFRAME(&_hx_pos_4ae29f91e0e52855_41_update)
HXLINE(  42)		this->super::update(d);
HXLINE(  44)		Float _hx_tmp;
HXDLIN(  44)		if ((this->player == (int)0)) {
HXLINE(  44)			_hx_tmp = ((int)1 - ((Float)::Math_obj::abs((::Level_obj::BottomRow - ::flixel::FlxG_obj::height)) / (Float)(int)120));
            		}
            		else {
HXLINE(  44)			_hx_tmp = ((int)1 - ((Float)::Math_obj::abs(::Level_obj::TopRow) / (Float)(int)120));
            		}
HXDLIN(  44)		this->maxAlpha = ::Math_obj::min((int)1,::Math_obj::max((int)0,_hx_tmp));
HXLINE(  48)		 ::flixel::_hx_system::FlxSound _hx_tmp1 = this->warning;
HXDLIN(  48)		_hx_tmp1->set_volume(((Float)this->maxAlpha / (Float)(int)2));
HXLINE(  50)		if (this->up) {
HXLINE(  51)			{
HXLINE(  51)				 ::EdgeGlow _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  51)				_g->set_alpha((_g->alpha + ((Float)0.02)));
            			}
HXLINE(  52)			if ((this->alpha >= this->maxAlpha)) {
HXLINE(  53)				this->up = false;
            			}
            		}
            		else {
HXLINE(  57)			{
HXLINE(  57)				 ::EdgeGlow _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  57)				_g1->set_alpha((_g1->alpha - ((Float)0.02)));
            			}
HXLINE(  58)			if ((this->alpha <= (int)0)) {
HXLINE(  59)				this->up = true;
            			}
            		}
            	}



hx::ObjectPtr< EdgeGlow_obj > EdgeGlow_obj::__new(int P) {
	hx::ObjectPtr< EdgeGlow_obj > __this = new EdgeGlow_obj();
	__this->__construct(P);
	return __this;
}

hx::ObjectPtr< EdgeGlow_obj > EdgeGlow_obj::__alloc(hx::Ctx *_hx_ctx,int P) {
	EdgeGlow_obj *__this = (EdgeGlow_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(EdgeGlow_obj), true, "EdgeGlow"));
	*(void **)__this = EdgeGlow_obj::_hx_vtable;
	__this->__construct(P);
	return __this;
}

EdgeGlow_obj::EdgeGlow_obj()
{
}

void EdgeGlow_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EdgeGlow);
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(maxAlpha,"maxAlpha");
	HX_MARK_MEMBER_NAME(up,"up");
	HX_MARK_MEMBER_NAME(warning,"warning");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EdgeGlow_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(maxAlpha,"maxAlpha");
	HX_VISIT_MEMBER_NAME(up,"up");
	HX_VISIT_MEMBER_NAME(warning,"warning");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val EdgeGlow_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { return hx::Val( up ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"warning") ) { return hx::Val( warning ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxAlpha") ) { return hx::Val( maxAlpha ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val EdgeGlow_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { up=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"warning") ) { warning=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxAlpha") ) { maxAlpha=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EdgeGlow_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"));
	outFields->push(HX_HCSTRING("maxAlpha","\x1a","\xfa","\xb3","\xcb"));
	outFields->push(HX_HCSTRING("up","\x5b","\x66","\x00","\x00"));
	outFields->push(HX_HCSTRING("warning","\x5c","\xda","\xcb","\x09"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo EdgeGlow_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(EdgeGlow_obj,player),HX_HCSTRING("player","\x61","\xeb","\xb8","\x37")},
	{hx::fsFloat,(int)offsetof(EdgeGlow_obj,maxAlpha),HX_HCSTRING("maxAlpha","\x1a","\xfa","\xb3","\xcb")},
	{hx::fsBool,(int)offsetof(EdgeGlow_obj,up),HX_HCSTRING("up","\x5b","\x66","\x00","\x00")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(EdgeGlow_obj,warning),HX_HCSTRING("warning","\x5c","\xda","\xcb","\x09")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *EdgeGlow_obj_sStaticStorageInfo = 0;
#endif

static ::String EdgeGlow_obj_sMemberFields[] = {
	HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"),
	HX_HCSTRING("maxAlpha","\x1a","\xfa","\xb3","\xcb"),
	HX_HCSTRING("up","\x5b","\x66","\x00","\x00"),
	HX_HCSTRING("warning","\x5c","\xda","\xcb","\x09"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void EdgeGlow_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EdgeGlow_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EdgeGlow_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EdgeGlow_obj::__mClass,"__mClass");
};

#endif

hx::Class EdgeGlow_obj::__mClass;

void EdgeGlow_obj::__register()
{
	hx::Object *dummy = new EdgeGlow_obj;
	EdgeGlow_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("EdgeGlow","\x8a","\x61","\x76","\x2e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = EdgeGlow_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EdgeGlow_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EdgeGlow_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EdgeGlow_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EdgeGlow_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EdgeGlow_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

