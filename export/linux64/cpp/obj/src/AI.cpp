// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_AI
#include <AI.h>
#endif
#ifndef INCLUDED_Ball
#include <Ball.h>
#endif
#ifndef INCLUDED_Level
#include <Level.h>
#endif
#ifndef INCLUDED_Paddle
#include <Paddle.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0e95472b80277c59_6_new,"AI","new",0x242e6dda,"AI.new","AI.hx",6,0x9d6f8ad6)
HX_LOCAL_STACK_FRAME(_hx_pos_0e95472b80277c59_22_nextMove,"AI","nextMove",0x6943d1ea,"AI.nextMove","AI.hx",22,0x9d6f8ad6)
HX_LOCAL_STACK_FRAME(_hx_pos_0e95472b80277c59_19_nextMove,"AI","nextMove",0x6943d1ea,"AI.nextMove","AI.hx",19,0x9d6f8ad6)
HX_LOCAL_STACK_FRAME(_hx_pos_0e95472b80277c59_26_update,"AI","update",0xde8f10cf,"AI.update","AI.hx",26,0x9d6f8ad6)

void AI_obj::__construct( ::Paddle P){
            	HX_STACKFRAME(&_hx_pos_0e95472b80277c59_6_new)
HXLINE(  10)		this->tracking = true;
HXLINE(  15)		super::__construct();
HXLINE(  16)		this->paddle = P;
            	}

Dynamic AI_obj::__CreateEmpty() { return new AI_obj; }

void *AI_obj::_hx_vtable = 0;

Dynamic AI_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AI_obj > _hx_result = new AI_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AI_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x000038e8) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x000038e8;
	} else {
		return inClassId==(int)0x25a685e0;
	}
}

void AI_obj::nextMove(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::AI,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer t){
            			HX_GC_STACKFRAME(&_hx_pos_0e95472b80277c59_22_nextMove)
HXLINE(  22)			_gthis->tracking = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_0e95472b80277c59_19_nextMove)
HXDLIN(  19)		 ::AI _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  20)		this->tracking = false;
HXLINE(  21)		 ::flixel::util::FlxTimer _hx_tmp =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(  21)		_hx_tmp->start((::Math_obj::random() * ((Float)0.5)), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(AI_obj,nextMove,(void))

void AI_obj::update(Float d){
            	HX_STACKFRAME(&_hx_pos_0e95472b80277c59_26_update)
HXLINE(  27)		this->super::update(d);
HXLINE(  28)		if (this->tracking) {
HXLINE(  29)			 ::flixel::math::FlxPoint _hx_tmp = this->paddle->maxVelocity;
HXDLIN(  29)			_hx_tmp->set_x((::Math_obj::abs(::Level_obj::Balls->__get(this->paddle->player).StaticCast<  ::Ball >()->velocity->x) + (int)5));
HXLINE(  30)			if ((::Level_obj::Balls->__get(this->paddle->player).StaticCast<  ::Ball >()->x < this->paddle->x)) {
HXLINE(  31)				this->cMove = (int)-1;
            			}
            			else {
HXLINE(  33)				Float _hx_tmp1 = ::Level_obj::Balls->__get(this->paddle->player).StaticCast<  ::Ball >()->x;
HXDLIN(  33)				Float _hx_tmp2 = (_hx_tmp1 - ::Level_obj::Balls->__get(this->paddle->player).StaticCast<  ::Ball >()->get_width());
HXDLIN(  33)				Float _hx_tmp3 = this->paddle->x;
HXDLIN(  33)				if ((_hx_tmp2 > (_hx_tmp3 + this->paddle->get_width()))) {
HXLINE(  34)					this->cMove = (int)1;
            				}
            				else {
HXLINE(  37)					this->cMove = (int)0;
            				}
            			}
            		}
            	}



hx::ObjectPtr< AI_obj > AI_obj::__new( ::Paddle P) {
	hx::ObjectPtr< AI_obj > __this = new AI_obj();
	__this->__construct(P);
	return __this;
}

hx::ObjectPtr< AI_obj > AI_obj::__alloc(hx::Ctx *_hx_ctx, ::Paddle P) {
	AI_obj *__this = (AI_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AI_obj), true, "AI"));
	*(void **)__this = AI_obj::_hx_vtable;
	__this->__construct(P);
	return __this;
}

AI_obj::AI_obj()
{
}

void AI_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AI);
	HX_MARK_MEMBER_NAME(paddle,"paddle");
	HX_MARK_MEMBER_NAME(tracking,"tracking");
	HX_MARK_MEMBER_NAME(amt,"amt");
	HX_MARK_MEMBER_NAME(cMove,"cMove");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AI_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(paddle,"paddle");
	HX_VISIT_MEMBER_NAME(tracking,"tracking");
	HX_VISIT_MEMBER_NAME(amt,"amt");
	HX_VISIT_MEMBER_NAME(cMove,"cMove");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

hx::Val AI_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"amt") ) { return hx::Val( amt ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cMove") ) { return hx::Val( cMove ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paddle") ) { return hx::Val( paddle ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tracking") ) { return hx::Val( tracking ); }
		if (HX_FIELD_EQ(inName,"nextMove") ) { return hx::Val( nextMove_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AI_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"amt") ) { amt=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cMove") ) { cMove=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paddle") ) { paddle=inValue.Cast<  ::Paddle >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tracking") ) { tracking=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AI_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("paddle","\x6a","\x44","\x3c","\xe4"));
	outFields->push(HX_HCSTRING("tracking","\x37","\xe7","\xbd","\x7f"));
	outFields->push(HX_HCSTRING("amt","\x08","\xfa","\x49","\x00"));
	outFields->push(HX_HCSTRING("cMove","\x14","\x7d","\xe5","\x33"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AI_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Paddle*/ ,(int)offsetof(AI_obj,paddle),HX_HCSTRING("paddle","\x6a","\x44","\x3c","\xe4")},
	{hx::fsBool,(int)offsetof(AI_obj,tracking),HX_HCSTRING("tracking","\x37","\xe7","\xbd","\x7f")},
	{hx::fsInt,(int)offsetof(AI_obj,amt),HX_HCSTRING("amt","\x08","\xfa","\x49","\x00")},
	{hx::fsFloat,(int)offsetof(AI_obj,cMove),HX_HCSTRING("cMove","\x14","\x7d","\xe5","\x33")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AI_obj_sStaticStorageInfo = 0;
#endif

static ::String AI_obj_sMemberFields[] = {
	HX_HCSTRING("paddle","\x6a","\x44","\x3c","\xe4"),
	HX_HCSTRING("tracking","\x37","\xe7","\xbd","\x7f"),
	HX_HCSTRING("amt","\x08","\xfa","\x49","\x00"),
	HX_HCSTRING("cMove","\x14","\x7d","\xe5","\x33"),
	HX_HCSTRING("nextMove","\xa4","\x89","\x2d","\xf4"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void AI_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AI_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AI_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AI_obj::__mClass,"__mClass");
};

#endif

hx::Class AI_obj::__mClass;

void AI_obj::__register()
{
	hx::Object *dummy = new AI_obj;
	AI_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("AI","\xe8","\x38","\x00","\x00");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AI_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AI_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AI_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AI_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AI_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AI_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

