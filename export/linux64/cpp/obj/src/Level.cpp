// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Ball
#include <Ball.h>
#endif
#ifndef INCLUDED_Block
#include <Block.h>
#endif
#ifndef INCLUDED_EdgeGlow
#include <EdgeGlow.h>
#endif
#ifndef INCLUDED_Glow
#include <Glow.h>
#endif
#ifndef INCLUDED_Input
#include <Input.h>
#endif
#ifndef INCLUDED_Level
#include <Level.h>
#endif
#ifndef INCLUDED_Mode
#include <Mode.h>
#endif
#ifndef INCLUDED_Obstacle
#include <Obstacle.h>
#endif
#ifndef INCLUDED_Paddle
#include <Paddle.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTweenManager
#include <flixel/tweens/FlxTweenManager.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_media_SoundChannel
#include <openfl/_legacy/media/SoundChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_57_new,"Level","new",0x0b84a856,"Level.new","Level.hx",57,0x000d33da)
HX_DEFINE_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_14_new,"Level","new",0x0b84a856,"Level.new","Level.hx",14,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_86_createBlocks,"Level","createBlocks",0x2b4ae7ec,"Level.createBlocks","Level.hx",86,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_101_update,"Level","update",0x594f8bd3,"Level.update","Level.hx",101,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_142_restart,"Level","restart",0x9920d2c5,"Level.restart","Level.hx",142,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_152_remBlock,"Level","remBlock",0x3aad71dd,"Level.remBlock","Level.hx",152,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_157_summonBlock,"Level","summonBlock",0x6acc1562,"Level.summonBlock","Level.hx",157,0x000d33da)
static const int _hx_array_data_05908564_11[] = {
	(int)-13421773,(int)-65536,(int)-35072,(int)-256,(int)-16711936,(int)-16746497,(int)-13434761,(int)-13421773,
};
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_230_explode,"Level","explode",0x55dec6d7,"Level.explode","Level.hx",230,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_245_explode,"Level","explode",0x55dec6d7,"Level.explode","Level.hx",245,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_260_explode,"Level","explode",0x55dec6d7,"Level.explode","Level.hx",260,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_257_explode,"Level","explode",0x55dec6d7,"Level.explode","Level.hx",257,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_256_explode,"Level","explode",0x55dec6d7,"Level.explode","Level.hx",256,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_180_explode,"Level","explode",0x55dec6d7,"Level.explode","Level.hx",180,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_206_explode,"Level","explode",0x55dec6d7,"Level.explode","Level.hx",206,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_220_explode,"Level","explode",0x55dec6d7,"Level.explode","Level.hx",220,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_273_move,"Level","move",0x07ed025b,"Level.move","Level.hx",273,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_279_set_cOffsetY,"Level","set_cOffsetY",0xee56a40a,"Level.set_cOffsetY","Level.hx",279,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_16_boot,"Level","boot",0x00a7a37c,"Level.boot","Level.hx",16,0x000d33da)
HX_LOCAL_STACK_FRAME(_hx_pos_ac17baf8e1623e9e_34_boot,"Level","boot",0x00a7a37c,"Level.boot","Level.hx",34,0x000d33da)

void Level_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Level,_gthis) HXARGC(1)
            		void _hx_run(int dir){
            			HX_GC_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_57_new)
HXLINE(  57)			if ((dir == (int)4096)) {
HXLINE(  58)				_gthis->move((int)-20);
            			}
            			else {
HXLINE(  60)				if ((dir == (int)256)) {
HXLINE(  61)					_gthis->move((int)20);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_14_new)
HXLINE(  26)		this->speed = ((Float)0.5);
HXLINE(  25)		this->cOffsetY = ((Float)0);
HXLINE(  24)		this->offsetY = ((Float)0);
HXLINE(  37)		 ::Level _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  38)		super::__construct(null());
HXLINE(  40)		::Level_obj::Blocks =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  41)		this->add(::Level_obj::Blocks);
HXLINE(  42)		 ::Obstacle leftWall = ( ( ::Obstacle)(this->add( ::Obstacle_obj::__alloc( HX_CTX ,-(::Level_obj::unit),(int)0,::Level_obj::unit,::flixel::FlxG_obj::height,(int)301989887,null(),null()))) );
HXLINE(  44)		leftWall->onHit = null();
HXLINE(  45)		::Level_obj::Blocks->add(leftWall).StaticCast<  ::Obstacle >();
HXLINE(  46)		 ::Obstacle rightWall = ( ( ::Obstacle)(this->add( ::Obstacle_obj::__alloc( HX_CTX ,::flixel::FlxG_obj::width,(int)0,::Level_obj::unit,::flixel::FlxG_obj::height,(int)301989887,null(),null()))) );
HXLINE(  48)		rightWall->onHit = null();
HXLINE(  49)		::Level_obj::Blocks->add(rightWall).StaticCast<  ::Obstacle >();
HXLINE(  51)		this->midWall = ( ( ::Obstacle)(this->add( ::Obstacle_obj::__alloc( HX_CTX ,(int)0,((Float)(::flixel::FlxG_obj::height - ::Level_obj::unit) / (Float)(int)2),::flixel::FlxG_obj::width,::Level_obj::unit,(int)-16777216,null(),null()))) );
HXLINE(  53)		this->midWall->onHit = null();
HXLINE(  54)		::Level_obj::Blocks->add(this->midWall).StaticCast<  ::Obstacle >();
HXLINE(  56)		this->midWall->onHit =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(  66)		this->numW = (int)14;
HXLINE(  67)		this->numH = (int)8;
HXLINE(  69)		::Block_obj::Width = ((Float)::flixel::FlxG_obj::width / (Float)this->numW);
HXLINE(  70)		::Block_obj::Height = (::Level_obj::unit * ((Float)1.5));
HXLINE(  72)		this->createBlocks();
HXLINE(  74)		 ::flixel::FlxBasic _hx_tmp = ( ( ::flixel::FlxBasic)(this->add( ::Ball_obj::__alloc( HX_CTX ,(int)0))) );
HXDLIN(  74)		::Level_obj::Balls = ::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1,this->add( ::Ball_obj::__alloc( HX_CTX ,(int)1)));
HXLINE(  75)		 ::flixel::FlxBasic _hx_tmp1 = ( ( ::flixel::FlxBasic)(this->add( ::Paddle_obj::__alloc( HX_CTX ,(int)0))) );
HXDLIN(  75)		::Level_obj::Paddles = ::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp1)->init(1,this->add( ::Paddle_obj::__alloc( HX_CTX ,(int)1)));
HXLINE(  77)		this->rumble =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXLINE(  78)		this->rumble->loadEmbedded(HX_("assets/sounds/rumble.ogg",91,d6,57,50),true,null(),null());
HXLINE(  79)		this->rumble->set_volume((int)0);
HXLINE(  80)		this->rumble->play(null(),null(),null());
HXLINE(  82)		this->add( ::EdgeGlow_obj::__alloc( HX_CTX ,(int)0));
HXLINE(  83)		this->add( ::EdgeGlow_obj::__alloc( HX_CTX ,(int)1));
            	}

Dynamic Level_obj::__CreateEmpty() { return new Level_obj; }

void *Level_obj::_hx_vtable = 0;

Dynamic Level_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Level_obj > _hx_result = new Level_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Level_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x05908564) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x05908564;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c;
	}
}

void Level_obj::createBlocks(){
            	HX_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_86_createBlocks)
HXLINE(  87)		::Level_obj::MoveyBlocks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  88)		this->blockArr = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  89)		{
HXLINE(  89)			int _g1 = (int)0;
HXDLIN(  89)			int _g = this->numW;
HXDLIN(  89)			while((_g1 < _g)){
HXLINE(  89)				_g1 = (_g1 + (int)1);
HXDLIN(  89)				int i = (_g1 - (int)1);
HXLINE(  90)				this->blockArr[i] = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  91)				{
HXLINE(  91)					int _g3 = (int)0;
HXDLIN(  91)					int _g2 = this->numH;
HXDLIN(  91)					while((_g3 < _g2)){
HXLINE(  91)						_g3 = (_g3 + (int)1);
HXDLIN(  91)						int j = (_g3 - (int)1);
HXLINE(  92)						this->blockArr->__get(i).StaticCast< ::Array< ::Dynamic> >()[j] = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  93)						{
HXLINE(  93)							int _g4 = (int)0;
HXDLIN(  93)							while((_g4 < (int)2)){
HXLINE(  93)								_g4 = (_g4 + (int)1);
HXDLIN(  93)								int p = (_g4 - (int)1);
HXLINE(  94)								this->summonBlock(i,j,p,(((Float)j / (Float)(int)10) + ((Float)i / (Float)(int)10)));
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Level_obj,createBlocks,(void))

void Level_obj::update(Float d){
            	HX_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_101_update)
HXLINE( 102)		this->super::update(d);
HXLINE( 105)		Float diff = (this->offsetY - this->cOffsetY);
HXLINE( 106)		if ((diff > (int)0)) {
HXLINE( 107)			 ::Level _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 107)			Float _g1 = _g->cOffsetY;
HXDLIN( 107)			Float _hx_tmp = this->speed;
HXDLIN( 107)			_g->set_cOffsetY((_g1 + ::Math_obj::min(_hx_tmp,::Math_obj::abs(diff))));
            		}
            		else {
HXLINE( 109)			if ((diff < (int)0)) {
HXLINE( 110)				 ::Level _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 110)				Float _g3 = _g2->cOffsetY;
HXDLIN( 110)				Float _hx_tmp1 = this->speed;
HXDLIN( 110)				_g2->set_cOffsetY((_g3 - ::Math_obj::min(_hx_tmp1,::Math_obj::abs(diff))));
            			}
            			else {
HXLINE( 113)				{
HXLINE( 113)					 ::flixel::_hx_system::FlxSound _this = this->rumble;
HXDLIN( 113)					if (hx::IsNotNull( _this->fadeTween )) {
HXLINE( 113)						_this->fadeTween->cancel();
            					}
HXDLIN( 113)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,(int)0,((Float)0.3), ::Dynamic(hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),null())),_this->volumeTween_dyn());
            				}
HXLINE( 114)				::flixel::FlxG_obj::camera->stopFX();
            			}
            		}
HXLINE( 117)		Float _hx_tmp2 = ((Float)::flixel::FlxG_obj::height / (Float)(int)2);
HXDLIN( 117)		Float _hx_tmp3 = ((_hx_tmp2 - (::Level_obj::unit * ((Float)0.5))) + this->cOffsetY);
HXDLIN( 117)		::Level_obj::TopRow = (_hx_tmp3 - (::Block_obj::Height * this->numH));
HXLINE( 118)		Float _hx_tmp4 = ((Float)::flixel::FlxG_obj::height / (Float)(int)2);
HXDLIN( 118)		Float _hx_tmp5 = ((_hx_tmp4 + (::Level_obj::unit * ((Float)0.5))) + this->cOffsetY);
HXDLIN( 118)		::Level_obj::BottomRow = (_hx_tmp5 + (::Block_obj::Height * this->numH));
HXLINE( 120)		if (hx::IsEq( ::PlayState_obj::Mode,::Mode_obj::PLAYING_dyn() )) {
HXLINE( 121)			if ((::flixel::FlxG_obj::mouse->_leftButton->current == (int)-1)) {
HXLINE( 122)				Float _hx_tmp6 = (::flixel::FlxG_obj::mouse->y - this->offsetY);
HXDLIN( 122)				this->move((_hx_tmp6 - ((Float)::flixel::FlxG_obj::height / (Float)(int)2)));
            			}
HXLINE( 125)			if ((::Level_obj::TopRow < (int)0)) {
HXLINE( 126)				this->explode((int)0);
            			}
HXLINE( 128)			if ((::Level_obj::BottomRow > ::flixel::FlxG_obj::height)) {
HXLINE( 129)				this->explode((int)1);
            			}
HXLINE( 132)			::Block_obj::GlobalTimer++;
            		}
            		else {
HXLINE( 134)			if (hx::IsEq( ::PlayState_obj::Mode,::Mode_obj::GAMEOVER_dyn() )) {
HXLINE( 135)				bool _hx_tmp7;
HXDLIN( 135)				if (!(::Input_obj::Start((int)0))) {
HXLINE( 135)					_hx_tmp7 = ::Input_obj::Start((int)1);
            				}
            				else {
HXLINE( 135)					_hx_tmp7 = true;
            				}
HXDLIN( 135)				if (_hx_tmp7) {
HXLINE( 136)					this->restart();
            				}
            			}
            		}
            	}


void Level_obj::restart(){
            	HX_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_142_restart)
HXLINE( 143)		::flixel::tweens::FlxTween_obj::globalManager->clear();
HXLINE( 144)		::flixel::tweens::FlxTween_obj::globalManager->update((int)0);
HXLINE( 145)		this->createBlocks();
HXLINE( 146)		this->trophy->destroy();
HXLINE( 147)		this->trophy = null();
HXLINE( 148)		::PlayState_obj::Mode = ::Mode_obj::PLAYING_dyn();
HXLINE( 149)		{
HXLINE( 149)			int _g = (int)0;
HXDLIN( 149)			::Array< ::Dynamic> _g1 = ::Level_obj::Balls;
HXDLIN( 149)			while((_g < _g1->length)){
HXLINE( 149)				 ::Ball b = _g1->__get(_g).StaticCast<  ::Ball >();
HXDLIN( 149)				_g = (_g + (int)1);
HXDLIN( 149)				b->resetPosition(true);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Level_obj,restart,(void))

void Level_obj::remBlock(int i,int j,int p){
            	HX_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_152_remBlock)
HXLINE( 153)		this->blockArr->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast< ::Array< ::Dynamic> >()[p] = null();
HXLINE( 154)		this->summonBlock(i,j,((int)1 - p),null());
            	}


HX_DEFINE_DYNAMIC_FUNC3(Level_obj,remBlock,(void))

void Level_obj::summonBlock(int i,int j,int p,hx::Null< Float >  __o_d){
Float d = __o_d.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_157_summonBlock)
HXLINE( 158)		if (hx::IsNotNull( this->blockArr->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast< ::Array< ::Dynamic> >()->__get(p).StaticCast<  ::Obstacle >() )) {
HXLINE( 158)			return;
            		}
HXLINE( 159)		::Array< int > colors = ::Array_obj< int >::fromData( _hx_array_data_05908564_11,8);
HXLINE( 162)		Float ob = (::Block_obj::Width * i);
HXLINE( 163)		Float ob1 = (::Block_obj::Height * j);
HXDLIN( 163)		Float ob2 = (ob1 + ((Float)::Level_obj::unit / (Float)(int)2));
HXLINE( 161)		 ::Block ob3 =  ::Block_obj::__alloc( HX_CTX ,ob,ob2,colors->__get(j),i,j,p,d);
HXLINE( 167)		::Level_obj::Blocks->add(ob3).StaticCast<  ::Obstacle >();
HXLINE( 168)		::Level_obj::MoveyBlocks->push(ob3);
HXLINE( 169)		this->blockArr->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast< ::Array< ::Dynamic> >()[p] = ob3;
HXLINE( 170)		::Glow_obj::onlyGlow(ob3);
HXLINE( 171)		if ((p == (int)0)) {
HXLINE( 172)			Float _hx_tmp = (((Float)::flixel::FlxG_obj::height / (Float)(int)2) - ob3->y);
HXDLIN( 172)			ob3->set_y((_hx_tmp - ob3->get_height()));
            		}
            		else {
HXLINE( 175)			ob3->set_y((((Float)::flixel::FlxG_obj::height / (Float)(int)2) + ob3->y));
            		}
HXLINE( 177)		ob3->set_offsetY(this->cOffsetY);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Level_obj,summonBlock,(void))

void Level_obj::explode(int P){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::Level,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer t3){
            			HX_GC_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_230_explode)
HXLINE( 230)			int _g12 = (int)0;
HXDLIN( 230)			int _g5 = _gthis->numW;
HXDLIN( 230)			while((_g12 < _g5)){
HXLINE( 230)				_g12 = (_g12 + (int)1);
HXDLIN( 230)				int i5 = (_g12 - (int)1);
HXLINE( 231)				{
HXLINE( 231)					int _g34 = (int)0;
HXDLIN( 231)					int _g25 = _gthis->numH;
HXDLIN( 231)					while((_g34 < _g25)){
HXLINE( 231)						_g34 = (_g34 + (int)1);
HXDLIN( 231)						int j2 = (_g34 - (int)1);
HXLINE( 232)						{
HXLINE( 232)							int _g41 = (int)0;
HXDLIN( 232)							while((_g41 < (int)2)){
HXLINE( 232)								_g41 = (_g41 + (int)1);
HXDLIN( 232)								int p = (_g41 - (int)1);
HXLINE( 233)								::flixel::tweens::FlxTween_obj::globalManager->clear();
HXLINE( 234)								if (hx::IsNotNull( _gthis->blockArr->__get(i5).StaticCast< ::Array< ::Dynamic> >()->__get(j2).StaticCast< ::Array< ::Dynamic> >()->__get(p).StaticCast<  ::Obstacle >() )) {
HXLINE( 235)									_gthis->blockArr->__get(i5).StaticCast< ::Array< ::Dynamic> >()->__get(j2).StaticCast< ::Array< ::Dynamic> >()->__get(p).StaticCast<  ::Obstacle >()->kill();
HXLINE( 236)									_gthis->blockArr->__get(i5).StaticCast< ::Array< ::Dynamic> >()->__get(j2).StaticCast< ::Array< ::Dynamic> >()->__get(p).StaticCast<  ::Obstacle >()->destroy();
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::Level,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer t4){
            			HX_GC_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_245_explode)
HXLINE( 245)			::flixel::tweens::FlxTween_obj::tween(_gthis, ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("cOffsetY",43,53,38,c3),(int)0)
            				->setFixed(1,HX_("offsetY",66,09,65,d7),(int)0)),(int)1, ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_7,int,P, ::Level,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer t5){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_6,int,P, ::Level,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween t6){
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_5, ::Level,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween t7){
            					HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_4, ::Level,_gthis,::Array< ::Dynamic>,io) HXARGC(1)
            					void _hx_run( ::Dynamic t8){
            						HX_GC_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_260_explode)
HXLINE( 260)						bool _hx_tmp6;
HXDLIN( 260)						if (hx::IsNotNull( t8 )) {
HXLINE( 260)							_hx_tmp6 = hx::IsEq( t8->__Field(HX_("ease",ee,8b,0c,43),hx::paccDynamic),::flixel::tweens::FlxEase_obj::sineOut_dyn() );
            						}
            						else {
HXLINE( 260)							_hx_tmp6 = true;
            						}
HXDLIN( 260)						if (_hx_tmp6) {
HXLINE( 261)							::flixel::tweens::FlxTween_obj::tween(_gthis->trophy->scale, ::Dynamic(hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("x",78,00,00,00),(int)0)),((Float)0.5), ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineIn_dyn())
            								->setFixed(1,HX_("onComplete",f8,d4,7e,5d),io->__get((int)0))));
            						}
            						else {
HXLINE( 263)							::flixel::tweens::FlxTween_obj::tween(_gthis->trophy->scale, ::Dynamic(hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("x",78,00,00,00),(int)1)),((Float)0.5), ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineOut_dyn())
            								->setFixed(1,HX_("onComplete",f8,d4,7e,5d),io->__get((int)0))));
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_257_explode)
HXLINE( 258)					::Array< ::Dynamic> io = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 259)					io[(int)0] =  ::Dynamic(new _hx_Closure_4(_gthis,io));
HXLINE( 265)					io->__get((int)0)(null());
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_256_explode)
HXLINE( 257)				 ::flixel::FlxSprite _gthis3 = _gthis->trophy;
HXDLIN( 257)				::Array< ::Dynamic> rhs = ::Level_obj::Paddles;
HXDLIN( 257)				int rhs1 = rhs->__get(((int)1 - P)).StaticCast<  ::Paddle >()->color;
HXDLIN( 257)				int Red = (((int)((int)(int)-16777216 >> (int)(int)16) & (int)(int)255) + ((int)((int)rhs1 >> (int)(int)16) & (int)(int)255));
HXDLIN( 257)				int Green = (((int)((int)(int)-16777216 >> (int)(int)8) & (int)(int)255) + ((int)((int)rhs1 >> (int)(int)8) & (int)(int)255));
HXDLIN( 257)				int Blue = (((int)(int)-16777216 & (int)(int)255) + ((int)rhs1 & (int)(int)255));
HXDLIN( 257)				int Alpha = (int)255;
HXDLIN( 257)				int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 257)				{
HXLINE( 257)					color = ((int)color & (int)(int)-16711681);
HXDLIN( 257)					int color1;
HXDLIN( 257)					if ((Red > (int)255)) {
HXLINE( 257)						color1 = (int)255;
            					}
            					else {
HXLINE( 257)						if ((Red < (int)0)) {
HXLINE( 257)							color1 = (int)0;
            						}
            						else {
HXLINE( 257)							color1 = Red;
            						}
            					}
HXDLIN( 257)					color = ((int)color | (int)((int)color1 << (int)(int)16));
            				}
HXDLIN( 257)				{
HXLINE( 257)					color = ((int)color & (int)(int)-65281);
HXDLIN( 257)					int color2;
HXDLIN( 257)					if ((Green > (int)255)) {
HXLINE( 257)						color2 = (int)255;
            					}
            					else {
HXLINE( 257)						if ((Green < (int)0)) {
HXLINE( 257)							color2 = (int)0;
            						}
            						else {
HXLINE( 257)							color2 = Green;
            						}
            					}
HXDLIN( 257)					color = ((int)color | (int)((int)color2 << (int)(int)8));
            				}
HXDLIN( 257)				{
HXLINE( 257)					color = ((int)color & (int)(int)-256);
HXDLIN( 257)					int color3;
HXDLIN( 257)					if ((Blue > (int)255)) {
HXLINE( 257)						color3 = (int)255;
            					}
            					else {
HXLINE( 257)						if ((Blue < (int)0)) {
HXLINE( 257)							color3 = (int)0;
            						}
            						else {
HXLINE( 257)							color3 = Blue;
            						}
            					}
HXDLIN( 257)					color = ((int)color | (int)color3);
            				}
HXDLIN( 257)				{
HXLINE( 257)					color = ((int)color & (int)(int)16777215);
HXDLIN( 257)					int color4;
HXDLIN( 257)					if ((Alpha > (int)255)) {
HXLINE( 257)						color4 = (int)255;
            					}
            					else {
HXLINE( 257)						if ((Alpha < (int)0)) {
HXLINE( 257)							color4 = (int)0;
            						}
            						else {
HXLINE( 257)							color4 = Alpha;
            						}
            					}
HXDLIN( 257)					color = ((int)color | (int)((int)color4 << (int)(int)24));
            				}
HXDLIN( 257)				::flixel::tweens::FlxTween_obj::color(_gthis3,((Float)0.5),(int)-1,color, ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_5(_gthis)))));
HXLINE( 267)				 ::flixel::FlxSprite _gthis4 = _gthis->trophy;
HXDLIN( 267)				Float _hx_tmp7;
HXDLIN( 267)				if ((P == (int)0)) {
HXLINE( 267)					Float _gthis5 = _gthis->trophy->y;
HXDLIN( 267)					_hx_tmp7 = (_gthis5 + _gthis->trophy->get_height());
            				}
            				else {
HXLINE( 267)					Float _gthis6 = _gthis->trophy->y;
HXDLIN( 267)					_hx_tmp7 = (_gthis6 - _gthis->trophy->get_height());
            				}
HXDLIN( 267)				::flixel::tweens::FlxTween_obj::tween(_gthis4, ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("y",79,00,00,00),_hx_tmp7)),((Float)0.5), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineInOut_dyn())));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_256_explode)
HXLINE( 256)			::flixel::tweens::FlxTween_obj::tween(_gthis->trophy, ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),(int)1)),((Float)0.5), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_6(P,_gthis)))));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_180_explode)
HXDLIN( 180)		 ::Level _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 181)		::flixel::FlxG_obj::sound->play(HX_("assets/sounds/explode.ogg",83,b1,62,fd),null(),null(),null(),null(),null());
HXLINE( 182)		::PlayState_obj::Mode = ::Mode_obj::GAMEOVER_dyn();
HXLINE( 183)		this->offsetY = this->cOffsetY;
HXLINE( 185)		::flixel::tweens::FlxTween_obj::globalManager->completeAll();
HXLINE( 186)		::flixel::tweens::FlxTween_obj::globalManager->update((int)0);
HXLINE( 187)		::flixel::util::FlxTimer_obj::globalManager->completeAll();
HXLINE( 188)		::flixel::util::FlxTimer_obj::globalManager->update((int)0);
HXLINE( 190)		{
HXLINE( 190)			int _g = (int)0;
HXDLIN( 190)			while((_g < (int)2)){
HXLINE( 190)				_g = (_g + (int)1);
HXDLIN( 190)				int i = (_g - (int)1);
HXLINE( 191)				::Level_obj::Balls->__get(i).StaticCast<  ::Ball >()->resetPosition(null());
            			}
            		}
HXLINE( 194)		Float t = (int)0;
HXLINE( 195)		int k;
HXLINE( 198)		{
HXLINE( 198)			int _g1 = (int)0;
HXDLIN( 198)			int _g2 = this->numH;
HXDLIN( 198)			while((_g1 < _g2)){
            				HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,int,P, ::Level,_gthis,int,k) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer t1){
            					HX_GC_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_206_explode)
HXLINE( 206)					int _g31 = (int)0;
HXDLIN( 206)					int _g22 = _gthis->numW;
HXDLIN( 206)					while((_g31 < _g22)){
HXLINE( 206)						_g31 = (_g31 + (int)1);
HXDLIN( 206)						int i2 = (_g31 - (int)1);
HXLINE( 207)						if (hx::IsNotNull( _gthis->blockArr->__get(i2).StaticCast< ::Array< ::Dynamic> >()->__get(k).StaticCast< ::Array< ::Dynamic> >()->__get(P).StaticCast<  ::Obstacle >() )) {
HXLINE( 208)							_gthis->blockArr->__get(i2).StaticCast< ::Array< ::Dynamic> >()->__get(k).StaticCast< ::Array< ::Dynamic> >()->__get(P).StaticCast<  ::Obstacle >()->die();
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 198)				_g1 = (_g1 + (int)1);
HXDLIN( 198)				int j = (_g1 - (int)1);
HXLINE( 199)				t = (t + ((Float)0.05));
HXLINE( 200)				k = ((this->numH - j) - (int)1);
HXLINE( 201)				{
HXLINE( 201)					int _g3 = (int)0;
HXDLIN( 201)					int _g21 = this->numW;
HXDLIN( 201)					while((_g3 < _g21)){
HXLINE( 201)						_g3 = (_g3 + (int)1);
HXDLIN( 201)						int i1 = (_g3 - (int)1);
HXLINE( 202)						if (hx::IsNotNull( this->blockArr->__get(i1).StaticCast< ::Array< ::Dynamic> >()->__get(k).StaticCast< ::Array< ::Dynamic> >()->__get(P).StaticCast<  ::Obstacle >() )) {
HXLINE( 203)							this->blockArr->__get(i1).StaticCast< ::Array< ::Dynamic> >()->__get(k).StaticCast< ::Array< ::Dynamic> >()->__get(P).StaticCast<  ::Obstacle >()->set_color((int)-1);
            						}
            					}
            				}
HXLINE( 205)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(t, ::Dynamic(new _hx_Closure_0(P,_gthis,k)),null());
            			}
            		}
HXLINE( 213)		{
HXLINE( 213)			int _g11 = (int)0;
HXDLIN( 213)			int _g4 = this->numH;
HXDLIN( 213)			while((_g11 < _g4)){
            				HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_1,int,P, ::Level,_gthis,int,j1) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer t2){
            					HX_GC_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_220_explode)
HXLINE( 220)					int _g33 = (int)0;
HXDLIN( 220)					int _g24 = _gthis->numW;
HXDLIN( 220)					while((_g33 < _g24)){
HXLINE( 220)						_g33 = (_g33 + (int)1);
HXDLIN( 220)						int i4 = (_g33 - (int)1);
HXLINE( 221)						::Array< ::Dynamic> _gthis1 = _gthis->blockArr->__get(i4).StaticCast< ::Array< ::Dynamic> >()->__get(j1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 221)						if (hx::IsNotNull( _gthis1->__get(((int)1 - P)).StaticCast<  ::Obstacle >() )) {
HXLINE( 222)							::Array< ::Dynamic> _gthis2 = _gthis->blockArr->__get(i4).StaticCast< ::Array< ::Dynamic> >()->__get(j1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 222)							_gthis2->__get(((int)1 - P)).StaticCast<  ::Obstacle >()->die();
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 213)				_g11 = (_g11 + (int)1);
HXDLIN( 213)				int j1 = (_g11 - (int)1);
HXLINE( 214)				t = (t + ((Float)0.1));
HXLINE( 215)				{
HXLINE( 215)					int _g32 = (int)0;
HXDLIN( 215)					int _g23 = this->numW;
HXDLIN( 215)					while((_g32 < _g23)){
HXLINE( 215)						_g32 = (_g32 + (int)1);
HXDLIN( 215)						int i3 = (_g32 - (int)1);
HXLINE( 216)						::Array< ::Dynamic> _hx_tmp = this->blockArr->__get(i3).StaticCast< ::Array< ::Dynamic> >()->__get(j1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 216)						if (hx::IsNotNull( _hx_tmp->__get(((int)1 - P)).StaticCast<  ::Obstacle >() )) {
HXLINE( 217)							::Array< ::Dynamic> _hx_tmp1 = this->blockArr->__get(i3).StaticCast< ::Array< ::Dynamic> >()->__get(j1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 217)							_hx_tmp1->__get(((int)1 - P)).StaticCast<  ::Obstacle >()->set_color((int)-1);
            						}
            					}
            				}
HXLINE( 219)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(t, ::Dynamic(new _hx_Closure_1(P,_gthis,j1)),null());
            			}
            		}
HXLINE( 228)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(t, ::Dynamic(new _hx_Closure_2(_gthis)),null());
HXLINE( 242)		t = (t + ((Float)0.8));
HXLINE( 243)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(t, ::Dynamic(new _hx_Closure_3(_gthis)),null());
HXLINE( 248)		t = (t + ((Float)1.2));
HXLINE( 249)		this->trophy =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,HX_("assets/images/trophy.png",96,13,b5,9e));
HXLINE( 250)		this->trophy->set_alpha((int)0);
HXLINE( 251)		 ::flixel::FlxSprite _hx_tmp2 = this->trophy;
HXDLIN( 251)		Float _hx_tmp3 = ((Float)::flixel::FlxG_obj::width / (Float)(int)2);
HXDLIN( 251)		_hx_tmp2->set_x((_hx_tmp3 - ((Float)this->trophy->get_width() / (Float)(int)2)));
HXLINE( 252)		 ::flixel::FlxSprite _hx_tmp4 = this->trophy;
HXDLIN( 252)		Float _hx_tmp5 = ((Float)::flixel::FlxG_obj::height / (Float)(int)2);
HXDLIN( 252)		_hx_tmp4->set_y((_hx_tmp5 - ((Float)this->trophy->get_height() / (Float)(int)2)));
HXLINE( 253)		this->add(this->trophy);
HXLINE( 254)		::Glow_obj::onlyGlow(this->trophy);
HXLINE( 255)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(t, ::Dynamic(new _hx_Closure_7(P,_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Level_obj,explode,(void))

void Level_obj::move(Float amt){
            	HX_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_273_move)
HXLINE( 274)		 ::Level _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 274)		_hx_tmp->offsetY = (_hx_tmp->offsetY + amt);
HXLINE( 275)		{
HXLINE( 275)			 ::flixel::_hx_system::FlxSound _this = this->rumble;
HXDLIN( 275)			if (hx::IsNull( _this->_channel )) {
HXLINE( 275)				_this->play(null(),null(),null());
            			}
HXDLIN( 275)			if (hx::IsNotNull( _this->fadeTween )) {
HXLINE( 275)				_this->fadeTween->cancel();
            			}
HXDLIN( 275)			_this->fadeTween = ::flixel::tweens::FlxTween_obj::num((int)0,((Float)0.5),((Float)0.3), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("onComplete",f8,d4,7e,5d),null())),_this->volumeTween_dyn());
            		}
HXLINE( 276)		::flixel::FlxG_obj::camera->shake(((Float)0.002),(int)100,null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Level_obj,move,(void))

Float Level_obj::set_cOffsetY(Float Y){
            	HX_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_279_set_cOffsetY)
HXLINE( 280)		this->midWall->set_offsetY(Y);
HXLINE( 282)		{
HXLINE( 282)			int _g = (int)0;
HXDLIN( 282)			::Array< ::Dynamic> _g1 = ::Level_obj::MoveyBlocks;
HXDLIN( 282)			while((_g < _g1->length)){
HXLINE( 282)				 ::Obstacle b = _g1->__get(_g).StaticCast<  ::Obstacle >();
HXDLIN( 282)				_g = (_g + (int)1);
HXLINE( 283)				b->set_offsetY(Y);
            			}
            		}
HXLINE( 285)		this->cOffsetY = Y;
HXLINE( 286)		return Y;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Level_obj,set_cOffsetY,return )

int Level_obj::unit;

::Array< ::Dynamic> Level_obj::Balls;

::Array< ::Dynamic> Level_obj::Paddles;

 ::flixel::group::FlxTypedGroup Level_obj::Blocks;

::Array< ::Dynamic> Level_obj::MoveyBlocks;

Float Level_obj::TopRow;

Float Level_obj::BottomRow;


hx::ObjectPtr< Level_obj > Level_obj::__new() {
	hx::ObjectPtr< Level_obj > __this = new Level_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Level_obj > Level_obj::__alloc(hx::Ctx *_hx_ctx) {
	Level_obj *__this = (Level_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Level_obj), true, "Level"));
	*(void **)__this = Level_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Level_obj::Level_obj()
{
}

void Level_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Level);
	HX_MARK_MEMBER_NAME(midWall,"midWall");
	HX_MARK_MEMBER_NAME(offsetY,"offsetY");
	HX_MARK_MEMBER_NAME(cOffsetY,"cOffsetY");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(rumble,"rumble");
	HX_MARK_MEMBER_NAME(blockArr,"blockArr");
	HX_MARK_MEMBER_NAME(trophy,"trophy");
	HX_MARK_MEMBER_NAME(numH,"numH");
	HX_MARK_MEMBER_NAME(numW,"numW");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Level_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(midWall,"midWall");
	HX_VISIT_MEMBER_NAME(offsetY,"offsetY");
	HX_VISIT_MEMBER_NAME(cOffsetY,"cOffsetY");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(rumble,"rumble");
	HX_VISIT_MEMBER_NAME(blockArr,"blockArr");
	HX_VISIT_MEMBER_NAME(trophy,"trophy");
	HX_VISIT_MEMBER_NAME(numH,"numH");
	HX_VISIT_MEMBER_NAME(numW,"numW");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Level_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"numH") ) { return hx::Val( numH ); }
		if (HX_FIELD_EQ(inName,"numW") ) { return hx::Val( numW ); }
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"rumble") ) { return hx::Val( rumble ); }
		if (HX_FIELD_EQ(inName,"trophy") ) { return hx::Val( trophy ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"midWall") ) { return hx::Val( midWall ); }
		if (HX_FIELD_EQ(inName,"offsetY") ) { return hx::Val( offsetY ); }
		if (HX_FIELD_EQ(inName,"restart") ) { return hx::Val( restart_dyn() ); }
		if (HX_FIELD_EQ(inName,"explode") ) { return hx::Val( explode_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cOffsetY") ) { return hx::Val( cOffsetY ); }
		if (HX_FIELD_EQ(inName,"blockArr") ) { return hx::Val( blockArr ); }
		if (HX_FIELD_EQ(inName,"remBlock") ) { return hx::Val( remBlock_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"summonBlock") ) { return hx::Val( summonBlock_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"createBlocks") ) { return hx::Val( createBlocks_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_cOffsetY") ) { return hx::Val( set_cOffsetY_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Level_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"unit") ) { outValue = ( unit ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"Balls") ) { outValue = ( Balls ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"Blocks") ) { outValue = ( Blocks ); return true; }
		if (HX_FIELD_EQ(inName,"TopRow") ) { outValue = ( TopRow ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"Paddles") ) { outValue = ( Paddles ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"BottomRow") ) { outValue = ( BottomRow ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"MoveyBlocks") ) { outValue = ( MoveyBlocks ); return true; }
	}
	return false;
}

hx::Val Level_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"numH") ) { numH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numW") ) { numW=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"rumble") ) { rumble=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trophy") ) { trophy=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"midWall") ) { midWall=inValue.Cast<  ::Obstacle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetY") ) { offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cOffsetY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_cOffsetY(inValue.Cast< Float >()) );cOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blockArr") ) { blockArr=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Level_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"unit") ) { unit=ioValue.Cast< int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"Balls") ) { Balls=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"Blocks") ) { Blocks=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"TopRow") ) { TopRow=ioValue.Cast< Float >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"Paddles") ) { Paddles=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"BottomRow") ) { BottomRow=ioValue.Cast< Float >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"MoveyBlocks") ) { MoveyBlocks=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void Level_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("midWall","\xb2","\xfe","\xf9","\x7d"));
	outFields->push(HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7"));
	outFields->push(HX_HCSTRING("cOffsetY","\x43","\x53","\x38","\xc3"));
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("rumble","\x51","\xfe","\xe7","\x3a"));
	outFields->push(HX_HCSTRING("blockArr","\x14","\xcf","\x91","\x19"));
	outFields->push(HX_HCSTRING("trophy","\xf0","\x02","\xc8","\x4e"));
	outFields->push(HX_HCSTRING("numH","\x42","\x9f","\x0e","\x49"));
	outFields->push(HX_HCSTRING("numW","\x51","\x9f","\x0e","\x49"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Level_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Obstacle*/ ,(int)offsetof(Level_obj,midWall),HX_HCSTRING("midWall","\xb2","\xfe","\xf9","\x7d")},
	{hx::fsFloat,(int)offsetof(Level_obj,offsetY),HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7")},
	{hx::fsFloat,(int)offsetof(Level_obj,cOffsetY),HX_HCSTRING("cOffsetY","\x43","\x53","\x38","\xc3")},
	{hx::fsFloat,(int)offsetof(Level_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(Level_obj,rumble),HX_HCSTRING("rumble","\x51","\xfe","\xe7","\x3a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Level_obj,blockArr),HX_HCSTRING("blockArr","\x14","\xcf","\x91","\x19")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(Level_obj,trophy),HX_HCSTRING("trophy","\xf0","\x02","\xc8","\x4e")},
	{hx::fsInt,(int)offsetof(Level_obj,numH),HX_HCSTRING("numH","\x42","\x9f","\x0e","\x49")},
	{hx::fsInt,(int)offsetof(Level_obj,numW),HX_HCSTRING("numW","\x51","\x9f","\x0e","\x49")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Level_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Level_obj::unit,HX_HCSTRING("unit","\x84","\xca","\xa9","\x4d")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Level_obj::Balls,HX_HCSTRING("Balls","\x74","\x4d","\xe2","\x40")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Level_obj::Paddles,HX_HCSTRING("Paddles","\xa9","\xc0","\xd0","\x9d")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(void *) &Level_obj::Blocks,HX_HCSTRING("Blocks","\xa6","\xa2","\x7e","\xdc")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Level_obj::MoveyBlocks,HX_HCSTRING("MoveyBlocks","\xce","\x6c","\x81","\x73")},
	{hx::fsFloat,(void *) &Level_obj::TopRow,HX_HCSTRING("TopRow","\xa5","\x32","\xbb","\xc9")},
	{hx::fsFloat,(void *) &Level_obj::BottomRow,HX_HCSTRING("BottomRow","\xcf","\x77","\x01","\x9a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Level_obj_sMemberFields[] = {
	HX_HCSTRING("midWall","\xb2","\xfe","\xf9","\x7d"),
	HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7"),
	HX_HCSTRING("cOffsetY","\x43","\x53","\x38","\xc3"),
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("rumble","\x51","\xfe","\xe7","\x3a"),
	HX_HCSTRING("blockArr","\x14","\xcf","\x91","\x19"),
	HX_HCSTRING("trophy","\xf0","\x02","\xc8","\x4e"),
	HX_HCSTRING("numH","\x42","\x9f","\x0e","\x49"),
	HX_HCSTRING("numW","\x51","\x9f","\x0e","\x49"),
	HX_HCSTRING("createBlocks","\xa2","\x6e","\x3f","\xca"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("restart","\xcf","\xc7","\xa5","\x6a"),
	HX_HCSTRING("remBlock","\x93","\xe5","\x7e","\xbd"),
	HX_HCSTRING("summonBlock","\x6c","\x57","\x71","\x3c"),
	HX_HCSTRING("explode","\xe1","\xbb","\x63","\x27"),
	HX_HCSTRING("move","\x11","\xe3","\x60","\x48"),
	HX_HCSTRING("set_cOffsetY","\xc0","\x2a","\x4b","\x8d"),
	::String(null()) };

static void Level_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Level_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Level_obj::unit,"unit");
	HX_MARK_MEMBER_NAME(Level_obj::Balls,"Balls");
	HX_MARK_MEMBER_NAME(Level_obj::Paddles,"Paddles");
	HX_MARK_MEMBER_NAME(Level_obj::Blocks,"Blocks");
	HX_MARK_MEMBER_NAME(Level_obj::MoveyBlocks,"MoveyBlocks");
	HX_MARK_MEMBER_NAME(Level_obj::TopRow,"TopRow");
	HX_MARK_MEMBER_NAME(Level_obj::BottomRow,"BottomRow");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Level_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Level_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Level_obj::unit,"unit");
	HX_VISIT_MEMBER_NAME(Level_obj::Balls,"Balls");
	HX_VISIT_MEMBER_NAME(Level_obj::Paddles,"Paddles");
	HX_VISIT_MEMBER_NAME(Level_obj::Blocks,"Blocks");
	HX_VISIT_MEMBER_NAME(Level_obj::MoveyBlocks,"MoveyBlocks");
	HX_VISIT_MEMBER_NAME(Level_obj::TopRow,"TopRow");
	HX_VISIT_MEMBER_NAME(Level_obj::BottomRow,"BottomRow");
};

#endif

hx::Class Level_obj::__mClass;

static ::String Level_obj_sStaticFields[] = {
	HX_HCSTRING("unit","\x84","\xca","\xa9","\x4d"),
	HX_HCSTRING("Balls","\x74","\x4d","\xe2","\x40"),
	HX_HCSTRING("Paddles","\xa9","\xc0","\xd0","\x9d"),
	HX_HCSTRING("Blocks","\xa6","\xa2","\x7e","\xdc"),
	HX_HCSTRING("MoveyBlocks","\xce","\x6c","\x81","\x73"),
	HX_HCSTRING("TopRow","\xa5","\x32","\xbb","\xc9"),
	HX_HCSTRING("BottomRow","\xcf","\x77","\x01","\x9a"),
	::String(null())
};

void Level_obj::__register()
{
	hx::Object *dummy = new Level_obj;
	Level_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Level","\x64","\x85","\x90","\x05");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Level_obj::__GetStatic;
	__mClass->mSetStaticField = &Level_obj::__SetStatic;
	__mClass->mMarkFunc = Level_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Level_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Level_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Level_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Level_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Level_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Level_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Level_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_16_boot)
HXDLIN(  16)		unit = (int)20;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ac17baf8e1623e9e_34_boot)
HXDLIN(  34)		TopRow = ((Float)1000);
            	}
}

