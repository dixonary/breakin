// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_openfl__legacy_filters_BitmapFilter
#include <openfl/_legacy/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl__legacy_filters_BlurFilter
#include <openfl/_legacy/filters/BlurFilter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fb673484fed27e9c_12_new,"openfl._legacy.filters.BlurFilter","new",0x0d0cfe88,"openfl._legacy.filters.BlurFilter.new","openfl/_legacy/filters/BlurFilter.hx",12,0x74d60905)
HX_LOCAL_STACK_FRAME(_hx_pos_fb673484fed27e9c_25_clone,"openfl._legacy.filters.BlurFilter","clone",0xd8621b85,"openfl._legacy.filters.BlurFilter.clone","openfl/_legacy/filters/BlurFilter.hx",25,0x74d60905)
namespace openfl{
namespace _legacy{
namespace filters{

void BlurFilter_obj::__construct(hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< int >  __o_quality){
Float blurX = __o_blurX.Default(((Float)4.0));
Float blurY = __o_blurY.Default(((Float)4.0));
int quality = __o_quality.Default(1);
            	HX_STACKFRAME(&_hx_pos_fb673484fed27e9c_12_new)
HXLINE(  14)		super::__construct(HX_("BlurFilter",df,d1,71,f3));
HXLINE(  16)		this->blurX = blurX;
HXLINE(  17)		this->blurY = blurY;
HXLINE(  18)		this->quality = quality;
            	}

Dynamic BlurFilter_obj::__CreateEmpty() { return new BlurFilter_obj; }

void *BlurFilter_obj::_hx_vtable = 0;

Dynamic BlurFilter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BlurFilter_obj > _hx_result = new BlurFilter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool BlurFilter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x42644652) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x42644652;
	} else {
		return inClassId==(int)0x63bfb582;
	}
}

 ::openfl::_legacy::filters::BitmapFilter BlurFilter_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_fb673484fed27e9c_25_clone)
HXDLIN(  25)		return  ::openfl::_legacy::filters::BlurFilter_obj::__alloc( HX_CTX ,this->blurX,this->blurY,this->quality);
            	}



BlurFilter_obj::BlurFilter_obj()
{
}

hx::Val BlurFilter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"blurX") ) { return hx::Val( blurX ); }
		if (HX_FIELD_EQ(inName,"blurY") ) { return hx::Val( blurY ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { return hx::Val( quality ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BlurFilter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"blurX") ) { blurX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blurY") ) { blurY=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { quality=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BlurFilter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("blurX","\xd1","\x0f","\x01","\xb5"));
	outFields->push(HX_HCSTRING("blurY","\xd2","\x0f","\x01","\xb5"));
	outFields->push(HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BlurFilter_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(BlurFilter_obj,blurX),HX_HCSTRING("blurX","\xd1","\x0f","\x01","\xb5")},
	{hx::fsFloat,(int)offsetof(BlurFilter_obj,blurY),HX_HCSTRING("blurY","\xd2","\x0f","\x01","\xb5")},
	{hx::fsInt,(int)offsetof(BlurFilter_obj,quality),HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BlurFilter_obj_sStaticStorageInfo = 0;
#endif

static ::String BlurFilter_obj_sMemberFields[] = {
	HX_HCSTRING("blurX","\xd1","\x0f","\x01","\xb5"),
	HX_HCSTRING("blurY","\xd2","\x0f","\x01","\xb5"),
	HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	::String(null()) };

static void BlurFilter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BlurFilter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BlurFilter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BlurFilter_obj::__mClass,"__mClass");
};

#endif

hx::Class BlurFilter_obj::__mClass;

void BlurFilter_obj::__register()
{
	hx::Object *dummy = new BlurFilter_obj;
	BlurFilter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.filters.BlurFilter","\x96","\x5a","\x81","\x2b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BlurFilter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BlurFilter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BlurFilter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BlurFilter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BlurFilter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BlurFilter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace filters
