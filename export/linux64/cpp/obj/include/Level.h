// Generated by Haxe 3.4.4
#ifndef INCLUDED_Level
#define INCLUDED_Level

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
HX_DECLARE_CLASS0(Ball)
HX_DECLARE_CLASS0(Level)
HX_DECLARE_CLASS0(Obstacle)
HX_DECLARE_CLASS0(Paddle)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,_hx_system,FlxSound)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Level_obj : public  ::flixel::group::FlxTypedGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedGroup_obj super;
		typedef Level_obj OBJ_;
		Level_obj();

	public:
		enum { _hx_ClassId = 0x05908564 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Level")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Level"); }
		static hx::ObjectPtr< Level_obj > __new();
		static hx::ObjectPtr< Level_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Level_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Level","\x64","\x85","\x90","\x05"); }

		static void __boot();
		static int unit;
		static ::Array< ::Dynamic> Balls;
		static ::Array< ::Dynamic> Paddles;
		static  ::flixel::group::FlxTypedGroup Blocks;
		static ::Array< ::Dynamic> MoveyBlocks;
		static Float TopRow;
		static Float BottomRow;
		 ::Obstacle midWall;
		Float offsetY;
		Float cOffsetY;
		Float speed;
		 ::flixel::_hx_system::FlxSound rumble;
		::Array< ::Dynamic> blockArr;
		 ::flixel::FlxSprite trophy;
		int numH;
		int numW;
		void createBlocks();
		::Dynamic createBlocks_dyn();

		void update(Float d);

		void restart();
		::Dynamic restart_dyn();

		void remBlock(int i,int j,int p);
		::Dynamic remBlock_dyn();

		void summonBlock(int i,int j,int p,hx::Null< Float >  d);
		::Dynamic summonBlock_dyn();

		void explode(int P);
		::Dynamic explode_dyn();

		void move(Float amt);
		::Dynamic move_dyn();

		Float set_cOffsetY(Float Y);
		::Dynamic set_cOffsetY_dyn();

};


#endif /* INCLUDED_Level */ 
