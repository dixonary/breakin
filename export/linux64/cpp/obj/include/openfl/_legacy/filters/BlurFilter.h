// Generated by Haxe 3.4.4
#ifndef INCLUDED_openfl__legacy_filters_BlurFilter
#define INCLUDED_openfl__legacy_filters_BlurFilter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl__legacy_filters_BitmapFilter
#include <openfl/_legacy/filters/BitmapFilter.h>
#endif
HX_DECLARE_STACK_FRAME(_hx_pos_fb673484fed27e9c_12_new)
HX_DECLARE_CLASS3(openfl,_legacy,filters,BitmapFilter)
HX_DECLARE_CLASS3(openfl,_legacy,filters,BlurFilter)

namespace openfl{
namespace _legacy{
namespace filters{


class HXCPP_CLASS_ATTRIBUTES BlurFilter_obj : public  ::openfl::_legacy::filters::BitmapFilter_obj
{
	public:
		typedef  ::openfl::_legacy::filters::BitmapFilter_obj super;
		typedef BlurFilter_obj OBJ_;
		BlurFilter_obj();

	public:
		enum { _hx_ClassId = 0x63bfb582 };

		void __construct(hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< int >  __o_quality);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._legacy.filters.BlurFilter")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._legacy.filters.BlurFilter"); }

		hx::ObjectPtr< BlurFilter_obj > __new(hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< int >  __o_quality) {
			hx::ObjectPtr< BlurFilter_obj > __this = new BlurFilter_obj();
			__this->__construct(__o_blurX,__o_blurY,__o_quality);
			return __this;
		}

		static hx::ObjectPtr< BlurFilter_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< int >  __o_quality) {
			BlurFilter_obj *__this = (BlurFilter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BlurFilter_obj), true, "openfl._legacy.filters.BlurFilter"));
			*(void **)__this = BlurFilter_obj::_hx_vtable;
{
Float blurX = __o_blurX.Default(((Float)4.0));
Float blurY = __o_blurY.Default(((Float)4.0));
int quality = __o_quality.Default(1);
            	HX_STACKFRAME(&_hx_pos_fb673484fed27e9c_12_new)
HXLINE(  14)		__this->super::__construct(HX_("BlurFilter",df,d1,71,f3));
HXLINE(  16)		( ( ::openfl::_legacy::filters::BlurFilter)(__this) )->blurX = blurX;
HXLINE(  17)		( ( ::openfl::_legacy::filters::BlurFilter)(__this) )->blurY = blurY;
HXLINE(  18)		( ( ::openfl::_legacy::filters::BlurFilter)(__this) )->quality = quality;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BlurFilter_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("BlurFilter","\xdf","\xd1","\x71","\xf3"); }

		Float blurX;
		Float blurY;
		int quality;
		 ::openfl::_legacy::filters::BitmapFilter clone();

};

} // end namespace openfl
} // end namespace _legacy
} // end namespace filters

#endif /* INCLUDED_openfl__legacy_filters_BlurFilter */ 
