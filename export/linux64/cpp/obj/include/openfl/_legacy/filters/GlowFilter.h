// Generated by Haxe 3.4.4
#ifndef INCLUDED_openfl__legacy_filters_GlowFilter
#define INCLUDED_openfl__legacy_filters_GlowFilter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl__legacy_filters_BitmapFilter
#include <openfl/_legacy/filters/BitmapFilter.h>
#endif
HX_DECLARE_STACK_FRAME(_hx_pos_3461a72abc8a3bab_21_new)
HX_DECLARE_CLASS3(openfl,_legacy,filters,BitmapFilter)
HX_DECLARE_CLASS3(openfl,_legacy,filters,GlowFilter)

namespace openfl{
namespace _legacy{
namespace filters{


class HXCPP_CLASS_ATTRIBUTES GlowFilter_obj : public  ::openfl::_legacy::filters::BitmapFilter_obj
{
	public:
		typedef  ::openfl::_legacy::filters::BitmapFilter_obj super;
		typedef GlowFilter_obj OBJ_;
		GlowFilter_obj();

	public:
		enum { _hx_ClassId = 0x16bcd6b0 };

		void __construct(hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< Float >  __o_strength,hx::Null< int >  __o_quality,hx::Null< bool >  __o_inner,hx::Null< bool >  __o_knockout);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._legacy.filters.GlowFilter")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._legacy.filters.GlowFilter"); }

		hx::ObjectPtr< GlowFilter_obj > __new(hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< Float >  __o_strength,hx::Null< int >  __o_quality,hx::Null< bool >  __o_inner,hx::Null< bool >  __o_knockout) {
			hx::ObjectPtr< GlowFilter_obj > __this = new GlowFilter_obj();
			__this->__construct(__o_color,__o_alpha,__o_blurX,__o_blurY,__o_strength,__o_quality,__o_inner,__o_knockout);
			return __this;
		}

		static hx::ObjectPtr< GlowFilter_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< Float >  __o_strength,hx::Null< int >  __o_quality,hx::Null< bool >  __o_inner,hx::Null< bool >  __o_knockout) {
			GlowFilter_obj *__this = (GlowFilter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GlowFilter_obj), true, "openfl._legacy.filters.GlowFilter"));
			*(void **)__this = GlowFilter_obj::_hx_vtable;
{
int color = __o_color.Default(0);
Float alpha = __o_alpha.Default(((Float)1.0));
Float blurX = __o_blurX.Default(((Float)4.0));
Float blurY = __o_blurY.Default(((Float)4.0));
Float strength = __o_strength.Default(((Float)1.0));
int quality = __o_quality.Default(1);
bool inner = __o_inner.Default(false);
bool knockout = __o_knockout.Default(false);
            	HX_STACKFRAME(&_hx_pos_3461a72abc8a3bab_21_new)
HXLINE(  23)		__this->super::__construct(HX_("DropShadowFilter",a7,ee,49,f7));
HXLINE(  25)		( ( ::openfl::_legacy::filters::GlowFilter)(__this) )->distance = (int)0;
HXLINE(  26)		( ( ::openfl::_legacy::filters::GlowFilter)(__this) )->angle = (int)0;
HXLINE(  27)		( ( ::openfl::_legacy::filters::GlowFilter)(__this) )->color = color;
HXLINE(  28)		( ( ::openfl::_legacy::filters::GlowFilter)(__this) )->alpha = alpha;
HXLINE(  29)		( ( ::openfl::_legacy::filters::GlowFilter)(__this) )->blurX = blurX;
HXLINE(  30)		( ( ::openfl::_legacy::filters::GlowFilter)(__this) )->blurY = blurY;
HXLINE(  31)		( ( ::openfl::_legacy::filters::GlowFilter)(__this) )->strength = strength;
HXLINE(  32)		( ( ::openfl::_legacy::filters::GlowFilter)(__this) )->quality = quality;
HXLINE(  33)		( ( ::openfl::_legacy::filters::GlowFilter)(__this) )->inner = inner;
HXLINE(  34)		( ( ::openfl::_legacy::filters::GlowFilter)(__this) )->knockout = knockout;
HXLINE(  35)		( ( ::openfl::_legacy::filters::GlowFilter)(__this) )->hideObject = false;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GlowFilter_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("GlowFilter","\x45","\xce","\xa2","\x2d"); }

		Float alpha;
		Float blurX;
		Float blurY;
		int color;
		bool inner;
		bool knockout;
		int quality;
		Float strength;
		Float angle;
		Float distance;
		bool hideObject;
		 ::openfl::_legacy::filters::BitmapFilter clone();

};

} // end namespace openfl
} // end namespace _legacy
} // end namespace filters

#endif /* INCLUDED_openfl__legacy_filters_GlowFilter */ 
