// Generated by Haxe 3.4.4
#ifndef INCLUDED_Paddle
#define INCLUDED_Paddle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS0(AI)
HX_DECLARE_CLASS0(Paddle)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,effects,particles,FlxTypedEmitter)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,_hx_system,FlxSound)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Paddle_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef Paddle_obj OBJ_;
		Paddle_obj();

	public:
		enum { _hx_ClassId = 0x18d0b88a };

		void __construct(int P);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Paddle")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Paddle"); }
		static hx::ObjectPtr< Paddle_obj > __new(int P);
		static hx::ObjectPtr< Paddle_obj > __alloc(hx::Ctx *_hx_ctx,int P);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Paddle_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Paddle","\x8a","\xb8","\xd0","\x18"); }

		static void __boot();
		static int ballSize;
		 ::flixel::_hx_system::FlxSound hum;
		 ::flixel::_hx_system::FlxSound hit;
		 ::flixel::effects::particles::FlxTypedEmitter emitter;
		int speed;
		int max;
		 ::AI ai;
		int hits;
		int player;
		void resetPosition();
		::Dynamic resetPosition_dyn();

		void update(Float d);

};


#endif /* INCLUDED_Paddle */ 
