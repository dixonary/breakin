// Generated by Haxe 3.4.4
#ifndef INCLUDED_AI
#define INCLUDED_AI

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
HX_DECLARE_CLASS0(AI)
HX_DECLARE_CLASS0(Paddle)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES AI_obj : public  ::flixel::FlxBasic_obj
{
	public:
		typedef  ::flixel::FlxBasic_obj super;
		typedef AI_obj OBJ_;
		AI_obj();

	public:
		enum { _hx_ClassId = 0x000038e8 };

		void __construct( ::Paddle P);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="AI")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"AI"); }
		static hx::ObjectPtr< AI_obj > __new( ::Paddle P);
		static hx::ObjectPtr< AI_obj > __alloc(hx::Ctx *_hx_ctx, ::Paddle P);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AI_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("AI","\xe8","\x38","\x00","\x00"); }

		 ::Paddle paddle;
		bool tracking;
		int amt;
		Float cMove;
		void nextMove();
		::Dynamic nextMove_dyn();

		void update(Float d);

};


#endif /* INCLUDED_AI */ 
