// Generated by Haxe 3.4.4
#ifndef INCLUDED_Glow
#define INCLUDED_Glow

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Glow)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Glow_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Glow_obj OBJ_;
		Glow_obj();

	public:
		enum { _hx_ClassId = 0x2f407aad };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="Glow")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"Glow"); }

		hx::ObjectPtr< Glow_obj > __new() {
			hx::ObjectPtr< Glow_obj > __this = new Glow_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Glow_obj > __alloc(hx::Ctx *_hx_ctx) {
			Glow_obj *__this = (Glow_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Glow_obj), false, "Glow"));
			*(void **)__this = Glow_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Glow_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Glow","\xad","\x7a","\x40","\x2f"); }

		static void makeGlow( ::flixel::FlxSprite sprite);
		static ::Dynamic makeGlow_dyn();

		static void onlyGlow( ::flixel::FlxSprite sprite);
		static ::Dynamic onlyGlow_dyn();

};


#endif /* INCLUDED_Glow */ 
