// Generated by Haxe 3.4.4
#ifndef INCLUDED_Input
#define INCLUDED_Input

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Input)
HX_DECLARE_CLASS0(InputMode)



class HXCPP_CLASS_ATTRIBUTES Input_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Input_obj OBJ_;
		Input_obj();

	public:
		enum { _hx_ClassId = 0x514b33ea };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="Input")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"Input"); }

		hx::ObjectPtr< Input_obj > __new() {
			hx::ObjectPtr< Input_obj > __this = new Input_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Input_obj > __alloc(hx::Ctx *_hx_ctx) {
			Input_obj *__this = (Input_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Input_obj), false, "Input"));
			*(void **)__this = Input_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Input_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Input","\xea","\x33","\x4b","\x51"); }

		static void __boot();
		static  ::InputMode Mode;
		static Float XAxis(int player);
		static ::Dynamic XAxis_dyn();

		static bool Start(int player);
		static ::Dynamic Start_dyn();

		static bool get_Ready();
		static ::Dynamic get_Ready_dyn();

};


#endif /* INCLUDED_Input */ 
