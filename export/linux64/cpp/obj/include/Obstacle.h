// Generated by Haxe 3.4.4
#ifndef INCLUDED_Obstacle
#define INCLUDED_Obstacle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS0(Ball)
HX_DECLARE_CLASS0(Obstacle)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Obstacle_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef Obstacle_obj OBJ_;
		Obstacle_obj();

	public:
		enum { _hx_ClassId = 0x6451af37 };

		void __construct(Float X,Float Y,int W,int H,int C,hx::Null< bool >  __o_P,hx::Null< Float >  __o_D);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Obstacle")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Obstacle"); }
		static hx::ObjectPtr< Obstacle_obj > __new(Float X,Float Y,int W,int H,int C,hx::Null< bool >  __o_P,hx::Null< Float >  __o_D);
		static hx::ObjectPtr< Obstacle_obj > __alloc(hx::Ctx *_hx_ctx,Float X,Float Y,int W,int H,int C,hx::Null< bool >  __o_P,hx::Null< Float >  __o_D);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Obstacle_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Obstacle","\x6f","\xa6","\xb7","\x97"); }

		static ::Array< ::Dynamic> balls;
		 ::Dynamic onHit;
		Dynamic onHit_dyn() { return onHit;}
		Float offsetY;
		void destroy();

		void die();
		::Dynamic die_dyn();

		virtual void update(Float d);

		Float set_offsetY(Float Y);
		::Dynamic set_offsetY_dyn();

};


#endif /* INCLUDED_Obstacle */ 
